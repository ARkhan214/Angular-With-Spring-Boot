Eta kaj kore ===>

 //for pasword reset
    @PostMapping("forgot-password")
    public ResponseEntity<Map<String, String>> forgotPassword(@RequestParam String email) {
        String result = authService.forgotPassword(email);
        return ResponseEntity.ok(Map.of("message", result));
    }

    @PostMapping("reset-password")
    public ResponseEntity<Map<String, String>> resetPassword(@RequestParam String token,
                                                             @RequestParam String newPassword) {
        String result = authService.resetPassword(token, newPassword);
        return ResponseEntity.ok(Map.of("message", result));
    }








package com.emranhss.mkbankspring.repository;

import com.emranhss.mkbankspring.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User,Long> {


    Optional<User> findByEmail(String email);

    Optional<User> findById(Long id);

    Optional<User> findByResetToken(String resetToken);

}  

package com.emranhss.mkbankspring.service;

import com.emranhss.mkbankspring.dto.AuthenticationResponse;
import com.emranhss.mkbankspring.entity.*;
import com.emranhss.mkbankspring.jwt.JwtService;
import com.emranhss.mkbankspring.repository.TokenRepository;
import com.emranhss.mkbankspring.repository.UserRepository;
import jakarta.mail.MessagingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

@Service
public class AuthService {

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private TokenRepository tokenRepository;

    @Autowired
    private EmailService emailService;

    @Autowired
    private AccountService accountService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private JwtService jwtService;

    @Autowired
    @Lazy
    private AuthenticationManager authenticationManager;


    @Value("src/main/resources/static/images")
    private String uploadDir;

    //Method for save,update or register (connected with UserResCon Method Number -1)
    //Save user
    public void saveOrUpdateUser(User user, MultipartFile imageFile) {
        if (imageFile != null && !imageFile.isEmpty()) {
            String fileName = saveImage(imageFile, user);
            user.setPhoto(fileName);
        }
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setRole(Role.ADMIN);
        user.setActive(true);
        userRepository.save(user);
        sendActivationEmail(user);
    }


    //method for find all user
    public List<User> findAll() {
        return userRepository.findAll();
    }

    //method for find user by id
    public User findById(Long id) {
        return userRepository.findById(id).get();
    }

    //method for find user by id or return null
    public User findUserById(Long id) {
        return userRepository.findById(id).orElse(null);
    }


    public void delete(User user) {
        userRepository.delete(user);
    }


    //Method for Send Email (connected with this saveOrUpdateUser methode)
    private void sendActivationEmail(User user) {
        String subject = "Welcome to Our Service – Confirm Your Registration";

        String mailText = "<!DOCTYPE html>"
                + "<html>"
                + "<head>"
                + "<style>"
                + "  body { font-family: Arial, sans-serif; line-height: 1.6; }"
                + "  .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 10px; }"
                + "  .header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 10px 10px 0 0; }"
                + "  .content { padding: 20px; }"
                + "  .footer { font-size: 0.9em; color: #777; margin-top: 20px; text-align: center; }"
                + "</style>"
                + "</head>"
                + "<body>"
                + "  <div class='container'>"
                + "    <div class='content'>"
                + "      <p>Dear " + user.getName() + ",</p>"
                + "      <p>Thank you for registering with us. We are excited to have you on board!</p>"
                + "      <p>Please confirm your email address to activate your account and get started.</p>"
                + "      <p>If you have any questions or need help, feel free to reach out to our support team.</p>"
                + "      <br>"
                + "      <p>Best regards,<br>The Support Team</p>"
                + "    </div>"
                + "    <div class='footer'>"
                + "      &copy; " + java.time.Year.now() + " MK Bank. All rights reserved."
                + "    </div>"
                + "  </div>"
                + "</body>"
                + "</html>";

        try {
            emailService.sendSimpleEmail(user.getEmail(), subject, mailText);
        } catch (MessagingException e) {
            throw new RuntimeException("Failed to send activation email", e);
        }
    }


    //Method for save image of file in User table
    public String saveImage(MultipartFile file, User user) {

        Path uploadPath = Paths.get(uploadDir + "/user");
        if (!Files.exists(uploadPath)) {
            try {
                Files.createDirectories(uploadPath);  // change here
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        String fileName = user.getName() + "_" + UUID.randomUUID().toString();
        try {
            Path filePath = uploadPath.resolve(fileName);
            Files.copy(file.getInputStream(), filePath);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return fileName;
    }


    //Method for save image file in Account table
    public String saveImageForAccount(MultipartFile file, Accounts account) {
        Path uploadPath = Paths.get(uploadDir + "/account");
        if (!Files.exists(uploadPath)) {
            try {
                Files.createDirectory(uploadPath);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        String accountName = account.getName();
        String fileName = accountName.trim().replaceAll("\\s+", "_");

        String savedFileName = fileName + "_" + UUID.randomUUID().toString();


        try {
            Path filePath = uploadPath.resolve(savedFileName);
            Files.copy(file.getInputStream(), filePath);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return savedFileName;
    }


    // for account save or update or registration (connected with AccountResCon Method Number -1)
    public void registerAccount(User user, MultipartFile imageFile, Accounts accountData) {
        if (imageFile != null && !imageFile.isEmpty()) {

            String filename = saveImage(imageFile, user);
            String accountPhoto = saveImageForAccount(imageFile, accountData);
            accountData.setPhoto(accountPhoto);
            user.setPhoto(filename);

        }
        // Encode password before saving User
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setRole(Role.USER);
        user.setActive(true);
        User savedUser = userRepository.save(user);


        accountData.setUser(savedUser);

        accountService.save(accountData);
        //for add initialDeposit ad first Transaction
        if (accountData.getBalance() > 0) {
            Transaction initialDeposit = new Transaction();
            initialDeposit.setAmount(accountData.getBalance());
            initialDeposit.setType(TransactionType.INITIALBALANCE);
            initialDeposit.setDescription("Initial deposit");
            transactionService.addTransaction(initialDeposit, accountData.getId(),null);
        }

        sendActivationEmail(savedUser);
    }


    //Employ plus user Save
    public void registerEmployee(User user, MultipartFile imageFile, Employee employeeData) {
        if (imageFile != null && !imageFile.isEmpty()) {
            String filename = saveImage(imageFile, user);
            String employeePhoto = saveImageForEmployee(imageFile, employeeData);
            employeeData.setPhoto(employeePhoto);
            user.setPhoto(filename);
        }
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setRole(Role.EMPLOYEE);
        user.setActive(true);
        User savedUser = userRepository.save(user);

        employeeData.setUser(savedUser);

        if (employeeData.getDateOfJoining() != null) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(employeeData.getDateOfJoining());
            cal.add(Calendar.YEAR,30); //joining date theke 30 year.
            employeeData.setRetirementDate(cal.getTime());
        }
        employeeService.save(employeeData);

        sendEmployeeWelcomeEmail(employeeData);

    }


    //Method for save image file in Account table
    public String saveImageForEmployee(MultipartFile file, Employee employee) {
        Path uploadPath = Paths.get(uploadDir + "/employee");

        if (!Files.exists(uploadPath)) {
            try {
                Files.createDirectory(uploadPath);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        String employeeName = employee.getName();
        String fileName = employeeName.trim().replaceAll("\\s+", "_");

        String savedFileName = fileName + "_" + UUID.randomUUID().toString();
//        String savedFileName = employee + "_" + UUID.randomUUID().toString();
        try {
            Path filePath = uploadPath.resolve(savedFileName);
            Files.copy(file.getInputStream(), filePath);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return savedFileName;
    }

    // mail for employee
    private void sendEmployeeWelcomeEmail(Employee employee) {
        User user = employee.getUser();
        String subject = "Congratulations – Welcome to MK Bank!";

        String mailText = "<!DOCTYPE html>"
                + "<html>"
                + "<head>"
                + "<style>"
                + "  body { font-family: Arial, sans-serif; line-height: 1.6; }"
                + "  .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 10px; }"
                + "  .header { background-color: #2196F3; color: white; padding: 10px; text-align: center; border-radius: 10px 10px 0 0; }"
                + "  .content { padding: 20px; }"
                + "  .footer { font-size: 0.9em; color: #777; margin-top: 20px; text-align: center; }"
                + "</style>"
                + "</head>"
                + "<body>"
                + "  <div class='container'>"
                + "    <div class='content'>"
                + "      <p>Dear " + user.getName() + ",</p>"
                + "      <p>We are delighted to inform you that you have been successfully added as a " + employee.getPosition() + " of MK Bank.</p>"
                + "      <p>Your official email is: <b>" + user.getEmail() + "</b></p>"
                + "      <p>You can now log in to the system using your account credentials provided by the admin.</p>"
                + "      <p>We wish you all the best in your new journey with us.</p>"
                + "      <br>"
                + "      <p>Best regards,<br>The HR & Admin Team</p>"
                + "    </div>"
                + "    <div class='footer'>"
                + "      &copy; " + java.time.Year.now() + " MK Bank. All rights reserved."
                + "    </div>"
                + "  </div>"
                + "</body>"
                + "</html>";

        try {
            emailService.sendSimpleEmail(user.getEmail(), subject, mailText);
        } catch (MessagingException e) {
            throw new RuntimeException("Failed to send congratulation email", e);
        }
    }


    //AuthService from sir

    //token save
    private void saveUserToken(String jwt, User user) {
        Token token = new Token();
        token.setToken(jwt);
        token.setLogout(false);
        token.setUser(user);

        tokenRepository.save(token);

    }


    //remove toke
    private void removeAllTokenByUser(User user) {

        List<Token> validTokens = tokenRepository.findAllTokenByUser(user.getId());

        if (validTokens.isEmpty()) {
            return;
        }
        validTokens.forEach(t -> {
            t.setLogout(true);
        });

        tokenRepository.saveAll(validTokens);

    }

    // It is Login Method
    public AuthenticationResponse authenticate(User request) {
        // Authenticate Username & Password
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        request.getUsername(),
                        request.getPassword()
                )
        );

        // Fetch User from DB
        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        // Check Activation Status
        if (!user.isActive()) {
            throw new RuntimeException("Account is not activated. Please check your email for activation link.");
        }

        // Generate JWT Token
        String jwt = jwtService.generateToken(user);

        // Remove Existing Tokens (Invalidate Old Sessions)
        removeAllTokenByUser(user);

        // Save New Token to DB (Optional if stateless)
        saveUserToken(jwt, user);

        // Return Authentication Response
        return new AuthenticationResponse(jwt, "User Login Successful");
    }



    //activeUser method (User sktive korar kaj kore)
    public  String activeUser(Long id){

        User user=userRepository.findById(id)
                .orElseThrow(()-> new RuntimeException("User not Found with this ID "+id));

        if(user !=null){
            user.setActive(true);

            userRepository.save(user);
            return "User Activated Successfully!";

        }else {
            return  "Invalid Activation Token!";
        }

    }

    //For Forgot & Reset Password
    // Forgot Password
    public String forgotPassword(String email) {
        Optional<User> userOpt = userRepository.findByEmail(email);
        if (userOpt.isPresent()) {
            User user = userOpt.get();

            // 1. Token generate
            String token = UUID.randomUUID().toString();
            user.setResetToken(token);

            // 2. Expiry after 15 munites
            Calendar calendar = Calendar.getInstance();
            calendar.add(Calendar.MINUTE, 15);
            Date expiryDate = calendar.getTime();
            user.setTokenExpiry(expiryDate);

            // 3. Save user
            userRepository.save(user);

            // 4. Reset link & email
            String resetLink = "http://localhost:4200/reset-password?token=" + token;
            String mailBody = "<!DOCTYPE html>"
                    + "<html><body>"
                    + "<p>Dear " + user.getName() + ",</p>"
                    + "<p>You requested a password reset. Click the link below to reset your password:</p>"
                    + "<p><a href=\"" + resetLink + "\">Reset Password</a></p>"
                    + "<p>This link will expire in 15 minutes.</p>"
                    + "<p>Best regards,<br>Support Team</p>"
                    + "</body></html>";

            try {
                sendEmail(user.getEmail(), "Password Reset Request", mailBody);
            } catch (MessagingException e) {
                throw new RuntimeException("Failed to send email", e);
            }

            return "Reset link sent to your email!";
        }
        return "User not found!";
    }

    // Reset Password
    public String resetPassword(String token, String newPassword) {
        Optional<User> userOpt = userRepository.findByResetToken(token);
        if (userOpt.isPresent()) {
            User user = userOpt.get();

            Date now = new Date();
            if (user.getTokenExpiry() == null || user.getTokenExpiry().before(now)) {
                return "Token expired!";
            }

            user.setPassword(passwordEncoder.encode(newPassword));
            user.setResetToken(null);
            user.setTokenExpiry(null);
            userRepository.save(user);

            return "Password updated successfully!";
        }
        return "Invalid token!";
    }

    // General sendEmail method
    private void sendEmail(String to, String subject, String body) throws MessagingException {
        emailService.sendSimpleEmail(to, subject, body);
    }
}
 
package com.emranhss.mkbankspring.restcontroller;

import com.emranhss.mkbankspring.dto.AuthenticationResponse;
import com.emranhss.mkbankspring.entity.Accounts;
import com.emranhss.mkbankspring.entity.User;
import com.emranhss.mkbankspring.repository.TokenRepository;
import com.emranhss.mkbankspring.repository.UserRepository;
import com.emranhss.mkbankspring.service.AuthService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/user/")
public class UserRestController {

    @Autowired
    private AuthService authService;

    @Autowired
    private TokenRepository tokenRepository;

    @Autowired
    private UserRepository userRepository;


    //Method for only user Save,update or register (Method number -1)
    @PostMapping("")
    public ResponseEntity<Map<String,String>>saveUser(
            @RequestPart(value = "user")String userJson,
            @RequestParam(value = "photo")MultipartFile file
    ) throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        User user = objectMapper.readValue(userJson, User.class);

        try {
            authService.saveOrUpdateUser(user, file);
            Map<String, String> response = new HashMap<>();
            response.put("Message", "User Added Successfully ");

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {

            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("Message", "User Add Faild " + e);
            return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // for Show User view by id (Method Number -2)
    @GetMapping("{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        User user = authService.findUserById(id);
        if (user != null){
            return ResponseEntity.ok(user);
        }else {
            return ResponseEntity.notFound().build();
        }
    }


    //Method for show all users (Method Number -3)
    @GetMapping("all")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = authService.findAll();
        return ResponseEntity.ok(users);

    }

    @PostMapping("login")
    public ResponseEntity<AuthenticationResponse>  login(@RequestBody User request){
        return ResponseEntity.ok(authService.authenticate(request));

    }

    @GetMapping("/active/{id}")
    public ResponseEntity<String> activeUser(@PathVariable("id") Long id){

        String response= authService.activeUser(id);
        return  ResponseEntity.ok(response);
    }


    @PostMapping("/logout")
    public ResponseEntity<String> logout(HttpServletRequest request) {
        final String authHeader = request.getHeader("Authorization");

        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return ResponseEntity.badRequest().body("Missing or invalid Authorization header.");
        }

        String token = authHeader.substring(7);  // Strip "Bearer "

        tokenRepository.findByToken(token).ifPresent(savedToken -> {
            savedToken.setLogout(true);  // Mark token as logged out
            tokenRepository.save(savedToken);
        });

        return ResponseEntity.ok("Logged out successfully.");
    }


//for admin profile
    @GetMapping("/profile")
    public ResponseEntity<?> getProfileForAdmin(Authentication authentication) {

        System.out.println("Authenticated User: " + authentication.getName());
        System.out.println("Authorities: " + authentication.getAuthorities());
        String email = authentication.getName();
        Optional<User> user =userRepository.findByEmail(email);
        User userEntity = user.orElseThrow(() -> new RuntimeException("User not found")); // safe check
        User user1 = authService.findById(userEntity.getId());
        return ResponseEntity.ok(user1);
    }




    //for pasword reset
    // Step 1: Forgot Password
    @PostMapping("forgot-password")
    public String forgotPassword(@RequestParam String email) {
        return authService.forgotPassword(email);
    }

    // Step 2: Reset Password
    @PostMapping("reset-password")
    public String resetPassword(@RequestParam String token, @RequestParam String newPassword) {
        return authService.resetPassword(token, newPassword);
    }
}
 ebar postman theke kivabe password change korbo ?code dao abong bole dao kothai ki ki korte hobe o kivabe data dite hobe?tarpor frontend er kaj kore diba ok?akdom beginer levele er kore diba .sohoje run kora jay jeno ok? ebar kaj koro. 






ঠিক আছে bondhu, আমি step by step দেখাব কিভাবে তুমি Postman দিয়ে **Forgot Password & Reset Password** workflow test করতে পারবে। তারপর আমি Frontend-এর জন্য সহজ Angular ফর্ম দেখাব।

---

## **1️⃣ Postman দিয়ে Password Reset Test**

### **Step 1: Forgot Password**

**URL:**

```
POST http://localhost:8085/api/user/forgot-password
```

**Headers:**

```
Content-Type: application/x-www-form-urlencoded
```

**Body (x-www-form-urlencoded):**

```
email=<user_email_here>
```

**Example:**

```
email=testuser@example.com
```

✅ Response:

```
"Reset link sent to your email!"
```

* Email service যদি ঠিক configured থাকে, ইউজারের email-এ link আসবে।
* Link দেখতে এরকম হবে:

```
http://localhost:4200/reset-password?token=<generated_token>
```

---

### **Step 2: Reset Password**

**URL:**

```
POST http://localhost:8085/api/user/reset-password
```

**Headers:**

```
Content-Type: application/x-www-form-urlencoded
```

**Body (x-www-form-urlencoded):**

```
token=<reset_token_from_email>
newPassword=<new_password_here>
```

**Example:**

```
token=123e4567-e89b-12d3-a456-426614174000
newPassword=MyNewPassword123
```

✅ Response:

```
"Password updated successfully!"
```

---

## **2️⃣ Backend Requirement**

* তুমি সব কিছুর জন্য আগে থেকেই AuthService, EmailService, UserRepository, RestController set করে রেখেছ।
* Email ঠিক configure থাকলে (SMTP server or Gmail/SendGrid) email যাবে।

**Important:** যদি email না থাকে, token কে console-এ print করাও যাতে Postman দিয়ে test করতে পারো।

```java
System.out.println("Reset Token: " + token);
```

---

## **3️⃣ Frontend Angular ফর্ম (Beginner Level)**

### **forgot-password.component.ts**

```ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-forgot-password',
  templateUrl: './forgot-password.component.html'
})
export class ForgotPasswordComponent {
  email: string = '';
  message: string = '';

  constructor(private http: HttpClient) {}

  sendResetLink() {
    const formData = new URLSearchParams();
    formData.set('email', this.email);

    this.http.post('http://localhost:8085/api/user/forgot-password', formData.toString(), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
    }).subscribe({
      next: (res: any) => this.message = res,
      error: err => this.message = 'Error sending reset link'
    });
  }
}
```

### **forgot-password.component.html**

```html
<div>
  <h2>Forgot Password</h2>
  <input type="email" [(ngModel)]="email" placeholder="Enter your email">
  <button (click)="sendResetLink()">Send Reset Link</button>
  <p>{{ message }}</p>
</div>
```

---

### **reset-password.component.ts**

```ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-reset-password',
  templateUrl: './reset-password.component.html'
})
export class ResetPasswordComponent {
  token: string = '';
  newPassword: string = '';
  message: string = '';

  constructor(private http: HttpClient, private route: ActivatedRoute) {
    this.route.queryParams.subscribe(params => {
      this.token = params['token'] || '';
    });
  }

  resetPassword() {
    const formData = new URLSearchParams();
    formData.set('token', this.token);
    formData.set('newPassword', this.newPassword);

    this.http.post('http://localhost:8085/api/user/reset-password', formData.toString(), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
    }).subscribe({
      next: (res: any) => this.message = res,
      error: err => this.message = 'Error resetting password'
    });
  }
}
```

### **reset-password.component.html**

```html
<div>
  <h2>Reset Password</h2>
  <input type="password" [(ngModel)]="newPassword" placeholder="Enter new password">
  <button (click)="resetPassword()">Reset Password</button>
  <p>{{ message }}</p>
</div>
```

---

✅ **Route Example in app-routing.module.ts**

```ts
const routes: Routes = [
  { path: 'forgot-password', component: ForgotPasswordComponent },
  { path: 'reset-password', component: ResetPasswordComponent },
];
```

---

Bondhu, এইভাবে তুমি **Postman** দিয়ে test করতে পারবে এবং **Frontend** দিয়ে user friendly UI বানাতে পারবে।

যদি চাও, আমি এবার পুরো Angular workflow **Login + Forgot Password + Reset Password** একসাথে সাজিয়ে দিই, যাতে beginner ও সহজে run করতে পারে।

চাও আমি সেটা বানাই?




=============Postman a debar full process===========
ঠিক আছে bondhu, আমি সহজভাবে explain করছি। 😄

---

### **Step 1: Forgot Password API call**

**URL:**

```
POST http://localhost:8085/api/user/forgot-password
```

**Headers:**

```
Content-Type: application/x-www-form-urlencoded
```

**Body (x-www-form-urlencoded):**

| Key   | Value                                       |
| ----- | ------------------------------------------- |
| email | [user@example.com](mailto:user@example.com) |

* এখানে তুমি সেই **user-এর email** দিবে যেইটির password reset করতে চাও।

**Send** করলে তোমার backend (AuthService) একটি **token generate করবে** এবং সেটাকে **email পাঠাবে**।

---

### **Step 2: Token পাওয়া**

* Normally, token যাবে **user-এর email**-এ।
* তুমি যদি এখন testing করো এবং email না দেখতে চাও, **backend console**-এ print করতে পারো:

```java
System.out.println("Reset Token: " + token);
```

* Forgot password method-এ এই line add করলে, token console-এ দেখাবে।

**Example Console Output:**

```
Reset Token: 123e4567-e89b-12d3-a456-426614174000
```

এটাই হবে তোমার **reset token**।

---

### **Step 3: Reset Password API call**

**URL:**

```
POST http://localhost:8085/api/user/reset-password
```

**Headers:**

```
Content-Type: application/x-www-form-urlencoded
```

**Body (x-www-form-urlencoded):**

| Key         | Value                                |
| ----------- | ------------------------------------ |
| token       | 123e4567-e89b-12d3-a456-426614174000 |
| newPassword | MyNewPassword123                     |

**Send** করলে password update হবে।

---

💡 **Summary:**

* Token normally email-এ যায়।
* Testing বা development-এর জন্য, temporarily console-এ print করে নিতে পারো।
* Postman-এ সেই token copy করে **reset-password API** call করবে।

---

Bondhu, চাইলে আমি এখন **frontend Angular form** বানাই, যেখানে user শুধু email দেবে, **OTP/Reset link console বা email থেকে auto handle হবে**, আর সহজে নতুন password set করবে।
তুমি কি চাও আমি সেটা বানাই?
 

