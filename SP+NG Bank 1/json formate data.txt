
http://localhost:8085/api/user/
@CrossOrigin(origins = "http://localhost:4200")

//me
user
{
  "name": "Md Rahim Khan",
  "email": "mdrahimkhan107107@gmail.com",
  "password": "12345" 
}

account
{
  "type": "SAVINGS",
  "balance": 15000.50,
  "userName": "Md Rahim Khan",
  "activeStatus": true 
}


//reja
user
{
  "name": "Reja",
  "email": "cmrejaulkarim@gmail.com",
  "password": "12345" 
}

account
{
  "type": "SAVINGS",
  "balance": 15000.50,
  "userName": "Reja",
  "activeStatus": true 
}

//sathe
user
{
  "name": "Sathe",
  "email": "sathekhanom550@gmail.com",
  "password": "12345" 
}

account
{
  "type": "SAVINGS",
  "balance": 15000.50,
  "userName": "Sathe",
  "activeStatus": true 
}


//sadier
user
{
  "name": "Sadier Rahman",
  "email": "sadiar.rahman970@gmail.com",
  "password": "12345" 
}

account
{
  "type": "SAVINGS",
  "balance": 15000.50,
  "userName": "Sadier Rahman",
  "activeStatus": true 
}

//Emran Mia
user
{
  "name": "Emran Mia",
  "email": "mr.t.imran11@gmail.com",
  "password": "12345",
  "account_id":"6" 
}

account
{
  "type": "SAVINGS",
  "balance": 15000.50,
  "userName": "Sadier Rahman",
  "activeStatus": true 
}


//UserRestController
//first a airokom silo
 @PostMapping
    public ResponseEntity<Map<String,String>>saveUser(
            @RequestPart(value = "user")String userJson,
            @RequestParam(value = "photo")MultipartFile file
            ) throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        User user = objectMapper.readValue(userJson, User.class);

        try {
            authService.saveOrUpdateUser(user, file);
            Map<String, String> response = new HashMap<>();
            response.put("Message", "User Added Successfully ");

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {

            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("Message", "User Add Faild " + e);
            return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }



//UserRestController
//Second a airokom silo
 @PostMapping
    public ResponseEntity<Map<String,String>>saveUser(
            @RequestPart(value = "user")String userJson,
	    @RequestPart(value = "account")String accountJson,
            @RequestParam(value = "photo")MultipartFile file
            ) throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        User user = objectMapper.readValue(userJson, User.class);
 	Accounts accounts = objectMapper.readValue(accountJson, Accounts.class);

        try {
            authService.registerAccount(user, file, accounts);
            Map<String, String> response = new HashMap<>();
            response.put("Message", "User Added Successfully ");

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {

            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("Message", "User Add Faild " + e);
            return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


























package com.emranhss.mkbankspring.restcontroller;

import com.emranhss.mkbankspring.entity.Accounts;
import com.emranhss.mkbankspring.entity.Transaction;
import com.emranhss.mkbankspring.repository.AccountRepository;
import com.emranhss.mkbankspring.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/transactions")
@CrossOrigin("*")
public class TransactionRestController {

    private final TransactionService transactionService;

    @Autowired
    private AccountRepository accountRepository;

    public TransactionRestController(TransactionService transactionService){
        this.transactionService = transactionService;
    }

    // Save new transaction
    @PostMapping
    public ResponseEntity<Transaction> addTransaction(@RequestBody Transaction transaction){
        Transaction savedTransaction = transactionService.saveTransaction(transaction);
        return ResponseEntity.ok(savedTransaction);
    }

    // Get all transactions
    @GetMapping
    public ResponseEntity<List<Transaction>> getAllTransactions(){
        List<Transaction> transactions = transactionService.getAllTransactions();
        return ResponseEntity.ok(transactions);
    }

    // Get transactions by account ID
    @GetMapping("/account/{accountId}")
    public ResponseEntity<List<Transaction>> getTransactionsByAccount(@PathVariable Long accountId){
        List<Transaction> transactions = transactionService.getTransactionsByAccountId(accountId);
        return ResponseEntity.ok(transactions);
    }

    // Get transactions by type
    @GetMapping("/type/{type}")
    public ResponseEntity<List<Transaction>> getTransactionsByType(@PathVariable String type){
        List<Transaction> transactions = transactionService.getTransactionsByType(type);
        return ResponseEntity.ok(transactions);
    }


    @PostMapping
    public Transaction createTransaction(@RequestBody Transaction transaction) {
        return transactionService.addTransaction(transaction);
    }

    @GetMapping
    public List<Transaction> getTransactions(@RequestParam(required = false) Long accountId) {
        if (accountId != null) {
            Accounts account = accountRepository.findById(accountId)
                    .orElseThrow(() -> new RuntimeException("Account not found"));
            return transactionService.getTransactionsByAccount(account);
        }
        return transactionService.getAllTransactions();
    }


}
