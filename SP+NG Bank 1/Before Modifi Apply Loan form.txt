import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ChangeDetectorRef, Component, Inject, PLATFORM_ID } from '@angular/core';
import { AlertService } from '../../service/alert-service';
import { Router } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';


@Component({
  selector: 'app-apply-loan-component',
  standalone: false,
  templateUrl: './apply-loan-component.html',
  styleUrl: './apply-loan-component.css'
})
export class ApplyLoanComponent {

  loanAmount!: number;
  durationInMonths!: number;
  loanType: string = '';

  message: string = '';

  constructor(
    private http: HttpClient,
    private alertService: AlertService,
    private cdr: ChangeDetectorRef,
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object
  ) { }

  private getAuthToken(): string {
    if (isPlatformBrowser(this.platformId)) {
      return localStorage.getItem('authToken') || '';
    }
    return '';
  }

  applyLoan() {
    if (!this.loanAmount || !this.durationInMonths || !this.loanType) {
      this.alertService.error('All fields are required!');
      return;
    }

    const payload = {
      loanAmount: this.loanAmount,
      durationInMonths: this.durationInMonths,
      loanType: this.loanType
    };

    const token = this.getAuthToken();

    if (!token) {
      this.alertService.error('Authentication token not found. Please login again.');
      return;
    }

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    this.http.post('http://localhost:8085/api/loans/apply', payload, { headers })
      .subscribe({
        next: (res: any) => {
          this.message = `Loan Applied Successfully! Loan ID: ${res.id}`;
          this.alertService.success(this.message);
          this.cdr.markForCheck();
          this.router.navigate(['/view-all-loan']);
        },
        error: (err: any) => {
          console.error(err);
          this.message = err.error || 'Error applying for loan';
          this.alertService.error(this.message);
        }
      });
  }
}



-----------------------------------




<p>apply-loan-component works!</p>
<!-- apply-loan-component.html -->
<div class="loan-form-container">
  <h2>Apply for a Loan</h2>

  <div class="form-group">
    <label for="loanAmount">Loan Amount</label>
    <input type="number" id="loanAmount" [(ngModel)]="loanAmount" placeholder="Enter loan amount" />
  </div>

  <div class="form-group">
    <label for="durationInMonths">Duration (Months)</label>
    <input type="number" id="durationInMonths" [(ngModel)]="durationInMonths" placeholder="Enter duration in months" />
  </div>

  <div class="form-group">
    <label for="loanType">Loan Type</label>
    <select id="loanType" [(ngModel)]="loanType">
      <option value="" disabled>Select Loan Type</option>
      <option value="PERSONAL">Personal</option>
      <option value="HOME">Home</option>
      <option value="CAR">Car</option>
      <option value="EDUCATION">Education</option>
      <option value="BUSINESS">Business</option>
    </select>
  </div>

  <button (click)="applyLoan()">Apply Loan</button>

  <p class="message" *ngIf="message">{{ message }}</p>
</div>


=========================2nd =======================

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ChangeDetectorRef, Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';
import { AlertService } from '../../service/alert-service';
import { Router } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';


@Component({
  selector: 'app-apply-loan-component',
  standalone: false,
  templateUrl: './apply-loan-component.html',
  styleUrl: './apply-loan-component.css'
})
export class ApplyLoanComponent  implements OnInit{

// User input
  loanAmount!: number;
  durationInMonths!: number;
  loanType: string = '';

  // Pre-filled data
  accountId!: number;
  accountName: string = '';
  balance!: number;
  accountType: string = '';
  nid: string = '';
  phoneNumber: string = '';
  address: string = '';

    // Calculated fields
  emiAmount: number = 0;
  totalPayable: number = 0;
  interestRate: number = 0;

  message: string = '';


    // Loan type interest rates
  private interestRates: { [key: string]: number } = {
    PERSONAL: 12,
    HOME: 8,
    CAR: 9,
    EDUCATION: 6,
    BUSINESS: 14
  };


  constructor(
    private http: HttpClient,
    private alertService: AlertService,
    private cdr: ChangeDetectorRef,
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object
  ) { }

  ngOnInit(): void {
    this.loadInitData();
  }

  
     // EMI calculation function
  calculateEmi(): void {
    if (!this.loanAmount || !this.durationInMonths || !this.loanType) {
      this.emiAmount = 0;
      this.totalPayable = 0;
      this.interestRate = 0;
      return;
    }

    this.interestRate = this.interestRates[this.loanType] || 10;
    const totalInterest = this.loanAmount * (this.interestRate / 100);
    this.totalPayable = this.loanAmount + totalInterest;
    this.emiAmount = this.totalPayable / this.durationInMonths;
  }

  private getAuthToken(): string {
    if (isPlatformBrowser(this.platformId)) {
      return localStorage.getItem('authToken') || '';
    }
    return '';
  }

  loadInitData() {
    const token = this.getAuthToken();
    if (!token) {
      this.alertService.error('Authentication token not found. Please login again.');
      return;
    }

    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });

    this.http.get<any>('http://localhost:8085/api/loans/apply/init', { headers })
      .subscribe({
        next: (res) => {
          // Pre-fill account & loan info
          this.accountId = res.account.id;
          this.accountName = res.account.name;
          this.balance = res.account.balance;
          this.accountType = res.account.accountType;
          this.nid = res.account.nid;
          this.phoneNumber = res.account.phoneNumber;
          this.address = res.account.address;

          // Optional: default values
          this.loanAmount = 0;
          this.durationInMonths = 0;
          this.loanType = '';
        },
        error: (err) => {
          console.error(err);
          this.alertService.error('Failed to load initial loan data');
        }
      });
  }

  applyLoan() {
    if (!this.loanAmount || !this.durationInMonths || !this.loanType) {
      this.alertService.error('All fields are required!');
      return;
    }

    const payload = {
      loanAmount: this.loanAmount,
      durationInMonths: this.durationInMonths,
      loanType: this.loanType
    };

    const token = this.getAuthToken();
    if (!token) {
      this.alertService.error('Authentication token not found. Please login again.');
      return;
    }

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    this.http.post('http://localhost:8085/api/loans/apply', payload, { headers })
      .subscribe({
        next: (res: any) => {
          this.message = `Loan Applied Successfully! Loan ID: ${res.id}`;
          this.alertService.success(this.message);
          this.cdr.markForCheck();
          this.router.navigate(['/view-all-loan']);
        },
        error: (err: any) => {
          console.error(err);
          this.message = err.error || 'Error applying for loan';
          this.alertService.error(this.message);
        }
      });
  }

}


---------------------------------------------------

<div class="container my-4" style="max-width: 700px; font-family: Arial, sans-serif;">
  <h2 class="text-center text-primary mb-4">Apply for Loan</h2>

  <form>
    <!-- Pre-filled Account Info -->
    <h5 class="mb-3">Account Information</h5>

    <div class="row mb-2">
      <div class="col-md-6">
        <label>Account Name</label>
        <input type="text" [value]="accountName" class="form-control" readonly>
      </div>
      <div class="col-md-6">
        <label>Account ID</label>
        <input type="text" [value]="accountId" class="form-control" readonly>
      </div>
    </div>

    <div class="row mb-2">
      <div class="col-md-6">
        <label>Balance</label>
        <input type="text" [value]="balance | number:'1.2-2'" class="form-control" readonly>
      </div>
      <div class="col-md-6">
        <label>Account Type</label>
        <input type="text" [value]="accountType" class="form-control" readonly>
      </div>
    </div>

    <div class="row mb-2">
      <div class="col-md-6">
        <label>NID</label>
        <input type="text" [value]="nid" class="form-control" readonly>
      </div>
      <div class="col-md-6">
        <label>Phone Number</label>
        <input type="text" [value]="phoneNumber" class="form-control" readonly>
      </div>
    </div>

    <div class="mb-3">
      <label>Address</label>
      <input type="text" [value]="address" class="form-control" readonly>
    </div>

    <hr class="my-3">

    <!-- Loan Inputs -->
    <h5 class="mb-3">Loan Details</h5>

    <div class="row mb-3">
      <div class="col-md-4">
        <label for="loanAmount">Loan Amount</label>
        <input type="number" id="loanAmount" [(ngModel)]="loanAmount" (input)="calculateEmi()" class="form-control" placeholder="Enter loan amount">
      </div>
      <div class="col-md-4">
        <label for="durationInMonths">Duration (Months)</label>
        <input type="number" id="durationInMonths" [(ngModel)]="durationInMonths" (input)="calculateEmi()" class="form-control" placeholder="Enter duration">
      </div>
      <div class="col-md-4">
        <label for="loanType">Loan Type</label>
        <select id="loanType" [(ngModel)]="loanType" (change)="calculateEmi()" class="form-select">
          <option value="" disabled selected>Select type</option>
          <option value="PERSONAL">Personal</option>
          <option value="HOME">Home</option>
          <option value="CAR">Car</option>
          <option value="EDUCATION">Education</option>
          <option value="BUSINESS">Business</option>
        </select>
      </div>
    </div>

    <!-- Calculated EMI Info -->
    <div class="border rounded p-3 mb-3 bg-light" *ngIf="emiAmount > 0">
      <h6>Loan Summary</h6>
      <div class="row">
        <div class="col-md-4 mb-2">
          <strong>Interest Rate:</strong>
          <p>{{ interestRate }}%</p>
        </div>
        <div class="col-md-4 mb-2">
          <strong>Total Payable:</strong>
          <p>{{ totalPayable | number:'1.2-2' }}</p>
        </div>
        <div class="col-md-4 mb-2">
          <strong>EMI (per month):</strong>
          <p>{{ emiAmount | number:'1.2-2' }}</p>
        </div>
      </div>
    </div>

    <button type="button" class="btn btn-primary w-100" (click)="applyLoan()">Apply Loan</button>

    <!-- Message -->
    <div *ngIf="message" class="alert alert-info mt-3">
      {{ message }}
    </div>
  </form>
</div>


---------------------------
=============================


<div class="container my-4" style="max-width: 700px; font-family: Arial, sans-serif;">
  <h2 class="text-center text-primary mb-4">Apply for Loan</h2>

  <form>
    <!-- Pre-filled Account Info -->
    <h5 class="mb-3">Account Information</h5>

    <div class="row mb-2">
      <div class="col-md-6">
        <label>Account Name</label>
        <input type="text" [value]="accountName" class="form-control" readonly>
      </div>
      <div class="col-md-6">
        <label>Account ID</label>
        <input type="text" [value]="accountId" class="form-control" readonly>
      </div>
    </div>

    <div class="row mb-2">
      <div class="col-md-6">
        <label>Balance</label>
        <input type="text" [value]="balance | number:'1.2-2'" class="form-control" readonly>
      </div>
      <div class="col-md-6">
        <label>Account Type</label>
        <input type="text" [value]="accountType" class="form-control" readonly>
      </div>
    </div>

    <div class="row mb-2">
      <div class="col-md-6">
        <label>NID</label>
        <input type="text" [value]="nid" class="form-control" readonly>
      </div>
      <div class="col-md-6">
        <label>Phone Number</label>
        <input type="text" [value]="phoneNumber" class="form-control" readonly>
      </div>
    </div>

    <div class="mb-3">
      <label>Address</label>
      <input type="text" [value]="address" class="form-control" readonly>
    </div>

    <hr class="my-3">

    <!-- Loan Inputs -->
    <h5 class="mb-3">Loan Details</h5>

    <div class="row mb-3">
      <div class="col-md-4">
        <label for="loanAmount">Loan Amount</label>
        <input type="number" id="loanAmount" [(ngModel)]="loanAmount" name="loanAmount" (input)="calculateEmi()" class="form-control" placeholder="Enter loan amount">
      </div>
      <div class="col-md-4">
        <label for="durationInMonths">Duration (Months)</label>
        <input type="number" id="durationInMonths" [(ngModel)]="durationInMonths" name="durationInMonths" (input)="calculateEmi()" class="form-control" placeholder="Enter duration">
      </div>
      <div class="col-md-4">
        <label for="loanType">Loan Type</label>
        <select id="loanType" [(ngModel)]="loanType" name="loanType" (change)="calculateEmi()" class="form-select">
          <option value="" disabled>Select type</option>
          <option value="PERSONAL">Personal</option>
          <option value="HOME">Home</option>
          <option value="CAR">Car</option>
          <option value="EDUCATION">Education</option>
          <option value="BUSINESS">Business</option>
        </select>
      </div>
    </div>

    <!-- Calculated EMI Info -->
    <div class="border rounded p-3 mb-3 bg-light" *ngIf="emi > 0 || totalPayable > 0">
      <h6>Loan Summary</h6>
      <div class="row">
        <div class="col-md-4 mb-2">
          <strong>Interest Rate:</strong>
          <p>{{ interestRate }}%</p>
        </div>
        <div class="col-md-4 mb-2">
          <strong>Total Payable:</strong>
          <p>{{ totalPayable | number:'1.2-2' }}</p>
        </div>
        <div class="col-md-4 mb-2">
          <strong>EMI (per month):</strong>
          <p>{{ emi | number:'1.2-2' }}</p>
        </div>
      </div>
    </div>

    <button type="button" class="btn btn-primary w-100" (click)="applyLoan()">Apply Loan</button>

    <!-- Message -->
    <div *ngIf="message" class="alert alert-info mt-3">
      {{ message }}
    </div>
  </form>
</div>
-----------------------------
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ChangeDetectorRef, Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';
import { AlertService } from '../../service/alert-service';
import { Router } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';


@Component({
  selector: 'app-apply-loan-component',
  standalone: false,
  templateUrl: './apply-loan-component.html',
  styleUrl: './apply-loan-component.css'
})
export class ApplyLoanComponent  implements OnInit{

// User input
  loanAmount!: number;
  durationInMonths!: number;
  loanType: string = '';

  // Pre-filled data
  accountId!: number;
  accountName: string = '';
  balance!: number;
  accountType: string = '';
  nid: string = '';
  phoneNumber: string = '';
  address: string = '';

  // Calculated fields
  emi: number = 0;
  totalPayable: number = 0;
  interestRate: number = 0;

  message: string = '';

  constructor(
    private http: HttpClient,
    private alertService: AlertService,
    private cdr: ChangeDetectorRef,
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object
  ) { }

  ngOnInit(): void {
    this.loadInitData();
  }

  private getAuthToken(): string {
    if (isPlatformBrowser(this.platformId)) {
      return localStorage.getItem('authToken') || '';
    }
    return '';
  }

  // EMI calculation via backend
  calculateEmi(): void {
    if (!this.loanAmount || !this.durationInMonths || !this.loanType) {
      this.emi = 0;
      this.totalPayable = 0;
      this.interestRate = 0;
      return;
    }

    const token = this.getAuthToken();
    if (!token) return;

    const payload = {
      loanAmount: this.loanAmount,
      durationInMonths: this.durationInMonths,
      loanType: this.loanType
    };

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    this.http.post<any>('http://localhost:8085/api/loans/calculate', payload, { headers })
      .subscribe({
        next: (res) => {
           console.log('EMI Response:', res);
          this.emi = res.emi;
           console.log('EMI Response:', res);
          this.totalPayable = res.totalPayable;
          this.interestRate = res.interestRate;
          this.cdr.markForCheck();
        },
        error: (err) => {
          console.error('EMI calculation failed', err);
        }
      });
  }

  loadInitData() {
    const token = this.getAuthToken();
    if (!token) {
      this.alertService.error('Authentication token not found. Please login again.');
      return;
    }

    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });

    this.http.get<any>('http://localhost:8085/api/loans/apply/init', { headers })
      .subscribe({
        next: (res) => {
          // Pre-fill account & loan info
          this.accountId = res.account.id;
          this.accountName = res.account.name;
          this.balance = res.account.balance;
          this.accountType = res.account.accountType;
          this.nid = res.account.nid;
          this.phoneNumber = res.account.phoneNumber;
          this.address = res.account.address;

          // Optional: default values
          this.loanAmount = 0;
          this.durationInMonths = 0;
          this.loanType = '';
        },
        error: (err) => {
          console.error(err);
          this.alertService.error('Failed to load initial loan data');
        }
      });
  }

  applyLoan() {
    if (!this.loanAmount || !this.durationInMonths || !this.loanType) {
      this.alertService.error('All fields are required!');
      return;
    }

    const payload = {
      loanAmount: this.loanAmount,
      durationInMonths: this.durationInMonths,
      loanType: this.loanType
    };

    const token = this.getAuthToken();
    if (!token) {
      this.alertService.error('Authentication token not found. Please login again.');
      return;
    }

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    this.http.post('http://localhost:8085/api/loans/apply', payload, { headers })
      .subscribe({
        next: (res: any) => {
          this.message = `Loan Applied Successfully! Loan ID: ${res.id}`;
          this.alertService.success(this.message);
          this.cdr.markForCheck();
          this.router.navigate(['/view-all-loan']);
        },
        error: (err: any) => {
          console.error(err);
          this.message = err.error || 'Error applying for loan';
          this.alertService.error(this.message);
        }
      });
  }

}



make a html select dropdown with same name value for bangladeshi all water supplier
