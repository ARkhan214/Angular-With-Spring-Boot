.requestMatchers(
   "/images/**",
   "/api/user/**",
   "/api/transactions/*/deposits",
   "/api/transactions/*/withdraws",
   "/api/auth/**",
   "/api/account/",
   "/api/account/all",
   "/api/account/**",
   "/api/user/login",
   "/api/user/login/**",
   "/images/**",
   "/api/user/active/**",
   "/api/employees/",
   "/api/employees/**",
   "/api/transactions/**",   // <-- ❌ সব transaction permitAll() করে দিচ্ছো
   "/api/transactions/account/**"
).permitAll()




.authorizeHttpRequests(req -> req
        // Public endpoints
        .requestMatchers(
            "/images/**",
            "/api/auth/**",
            "/api/user/login",
            "/api/user/register",
            "/api/user/active/**"
        ).permitAll()

        // Protected endpoints
        .requestMatchers("/api/account/**").authenticated()
        .requestMatchers("/api/transactions/**").authenticated()
        .requestMatchers("/api/employees/**").hasRole("EMPLOYEE")

        // Any other requests
        .anyRequest().authenticated()
)





==>Stype by stype
User Login Request (email, password) 
        ↓
Backend Authenticate 
        ↓
JWT Token Return 
        ↓
Frontend LocalStorage/Session এ Token Save 
        ↓
পরের সব Request → Authorization: Bearer <token>



=>
GET http://localhost:8085/api/transactions/1/deposits
GET http://localhost:8085/api/transactions/1/withdraws



=>Show Transaction
GET http://localhost:8085/api/transactions/all		(working)

GET http://localhost:8085/api/transactions/account/1      (not working)


<>===<>Final Show Transaction Filter By Transaction Type.<>===<>
Show Transaction By Deposit and withdraw
GET http://localhost:8085/api/transactions/1/withdraws
GET http://localhost:8085/api/transactions/1/Deposit


<=>Final Transaction code<=>
==>deposit request
POST http://localhost:8085/api/transactions/tr/1	(working)

{
  "amount": 5000,
  "type": "DEPOSIT",
  "description": "Cash deposit"
}

==>withdraw request
POST http://localhost:8085/api/transactions/tr/1	(working)

{
  "type": "WITHDRAW",
  "amount": 1000.0,
  "description": "Adding money"
}

==>Transfer request
Sender id ==> 	Authorization-->Bearer Token--->
Authorization-->Bearer Token--->{J ID theke Transfer hobe tar Login token}
Receiver id-->	http://localhost:8085/api/transactions/tr/transfer/3

==>DEPOSIT & WITHDRAW
POST http://localhost:8085/api/transactions/add


Body
{
  "type": "TRANSFER",
  "amount": 5000.0,
  "description": "Payment for House Rent"
}


{Eta kaj kortise}
URL কী হবে?

http://localhost:8085/api/account/profile
s
Method: GET

URL: http://localhost:8085/api/account/profile

Headers:

Authorization: Bearer <your_jwt_token>
(কারণ তুমি Spring Security + JWT ব্যবহার করছো, নাহলে authentication.getName() null হবে।)




EMAIL:=
farihamariam@gmail.com
mdrahimkhan107107@gmail.com
parvejmd4469@gmail.com
sadiar.rahman970@gmail.com
mr.t.imran11@gmail.com
halimaaktershemanto@gmail.com
sathekhanom550@gmail.com
cmrejaulkarim@gmail.com
mdrahimkhan107107@gmail.com
rimunna322@gmail.com 
mdatiqulislam59@gmail.com

MD Rahim Khan
Fariha Mariam
Sadier Rahman
Parve
Sathe Khanom

##Final code (USER,User+Account,User+Employee)

admin view ==>http://localhost:8085/api/user/profile

==>Only Add User(Admin)
POST http://localhost:8085/api/user/         (working)
GET  http://localhost:8085/api/user/all      (working)
GET  http://localhost:8085/api/user/1        (working)
{
  "name": "CM REJA",
  "email": "cmrejaulkarim@gmail.com",
  "password": "12345",
  "phoneNumber": "017859950",
  "dateOfBirth": "1990-01-02"
}



<=>For Save User + Account<=>
POST http://localhost:8085/api/account/

<=>View All Account
Get http://localhost:8085/api/account/all	(working)
<=>View Account By Id
Get http://localhost:8085/api/account/1	        (working)

==>json form Add Account
{
  "name": "Masud",
  "email": "masud@gmail.com",
  "password": "12345",
  "phoneNumber": "0317889001",
  "dateOfBirth": "1990-01-02",
  "active": true
}

{
  "name": "Masud",
  "accountType": "Savings",
  "balance": 5000,
  "nid": "1325678901200",
  "phoneNumber": "0317889001",
  "address": "Dhaka",
  "dateOfBirth": "1990-01-01",
  "accountOpeningDate": "2025-08-16",
  "accountClosingDate": null,
  "role": "USER"
}


<==>Employee + User<==>

==>সব Employee বের করা
GET http://localhost:8085/api/employees/

==>একজন Employee(id দিয়ে) বের করা 
GET http://localhost:8085/api/employees/{id}
http://localhost:8085/api/employees/5


==>Employee add json formate
POST http://localhost:8085/api/employees/

user 
{ 
"name":"Sathe Khanom",
"email":"sathebom550@gmail.com",
"password":"12345",
"phoneNumber":"017000566",
"dateOfBirth":"1995-05-20"
}   
                                                                                                                            
employee 
{
"name":"Sathe Khanom",
"status":"ACTIVE",
"nid":"1234560896644",
"phoneNumber":"017000566",
"address":"Dhaka,Bangladesh",
"position":"CASHIER",
"salary":25000,
"dateOfJoining":"2024-01-01",
"dateOfBirth":"1995-05-20",
"retirementDate":null,
"role": "EMPLOYEE"
 }
                                                                                                                                                                                                                                 

User profile .html
<div class="user-profile-container" *ngIf="account; else noAccount">
  <h2>Welcome, {{ account.name }}</h2>
  <img *ngIf="account.photo" [src]="'http://localhost:8085/images/account/'+account.photo" alt="Profile Photo" class="profile-photo">

  <div class="account-details">
    <p><strong>Account ID:</strong> {{ account.id }}</p>
    <p><strong>Account Type:</strong> {{ account.accountType }}</p>
    <p><strong>Balance:</strong> {{ account.balance | currency:'BDT' }}</p>
    <p><strong>NID:</strong> {{ account.nid }}</p>
    <p><strong>Phone Number:</strong> {{ account.phoneNumber }}</p>
    <p><strong>Address:</strong> {{ account.address }}</p>
    <p><strong>Date of Birth:</strong> {{ account.dateOfBirth | date:'dd-MM-yyyy' }}</p>
    <p><strong>Account Opening Date:</strong> {{ account.accountOpeningDate | date:'dd-MM-yyyy' }}</p>
    <p *ngIf="account.accountClosingDate"><strong>Account Closing Date:</strong> {{ account.accountClosingDate | date:'dd-MM-yyyy' }}</p>
    <p><strong>Account Status:</strong> {{ account.accountActiveStatus ? 'Active' : 'Inactive' }}</p>
    <p><strong>Role:</strong> {{ account.role }}</p>
  </div>

  <div class="profile-actions">
    <button (click)="viewStatement()">View Statement</button>
    <button (click)="logout()">Logout</button>
  </div>
</div>

<ng-template #noAccount>
  <p>No account information available.</p>
</ng-template>

<style>
.user-profile-container {
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: #fafafa;
}

.profile-photo {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  margin-bottom: 15px;
}

.account-details p {
  margin: 5px 0;
}

.profile-actions {
  margin-top: 20px;
}

.profile-actions button {
  margin-right: 10px;
  padding: 8px 16px;
  border: none;
  background-color: #1976d2;
  color: white;
  border-radius: 5px;
  cursor: pointer;
}

.profile-actions button:hover {
  background-color: #115293;
}
</style>










 //Transfer

transactionService er addtransaction method er  transfer part.eta bad diea notun kore onlytransfer method banaysi.
        else if (transaction.getType() == TransactionType.TRANSFER) {

            Long receiverId = transaction.getReceiverAccount().getId();
            Accounts receiver = accountRepository.findById(receiverId)
                    .orElseThrow(() -> new RuntimeException("Receiver account not found!"));

            System.out.println("Receiver current balance: " + receiver);

            if (receiver == null) {
                throw new RuntimeException("Receiver account must be provided for transfer!");
            }

            if (!receiver.isAccountActiveStatus()){
                throw new RuntimeException("Receiver account is closed!");
            }
            if (transaction.getAmount() > newBalance) {
                throw new RuntimeException("Insufficient balance!");
            }
            //minus amount from sender account
            newBalance -= transaction.getAmount();

            //update reciver balance
            double receiverBalance = receiver.getBalance();   //receiver balance find
            receiverBalance +=transaction.getAmount();        //receiver balance update
            receiver.setBalance(receiverBalance);             //save receiver new balance
            accountRepository.save(receiver);

            // Send receiver email
            this.cashIN(receiverId,transaction.getAmount());
        }



 public void sendTransactionEmail(Transaction transaction) {
        Accounts accounts = transaction.getAccount();
        User user = accounts.getUser();  // account holder

        String subject = "Transaction Confirmation";
        String mailText =  "<!DOCTYPE html>"
                + "<html>"
                + "<head>"
                + "<style>"
                + "  body { font-family: Arial, sans-serif; line-height: 1.6; }"
                + "  .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 10px; }"
                + "  .header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 10px 10px 0 0; }"
                + "  .content { padding: 20px; }"
                + "  .footer { font-size: 0.9em; color: #777; margin-top: 20px; text-align: center; }"
                + "</style>"
                + "</head>"
                + "<body>"
                + "  <div class='container'>"
                + "    <div class='header'>"
                + "      <h2>Congratulations!!</h2>"
                + "    </div>"
                + "    <div class='content'>"
                + "<p>Dear " + user.getName() + ",</p>"
                + "<p>TK " + transaction.getAmount() + " " + transaction.getType() + " successful on " + transaction.getTransactionTime() + " From Account ID: "+accounts.getId()+" Your Current balance is "+ accounts.getBalance()+"</p>"
                + "<p>Thanks for staying with us.</p>"
                + "    <div class='footer'>"
                + "      <p> Sincerely,</p>"
                + "      <p>MK Bank Ltd.</p>"
                + "    </div>"
                + "  </div>"
                + "</body>"
                + "</html>";

        try {
            emailService.sendSimpleEmail(user.getEmail(), subject, mailText);
        } catch (MessagingException e) {
            throw new RuntimeException("Failed to send transaction email", e);
        }
    }






public void sendTransactionEmail(Transaction transaction) {
        Accounts accounts = transaction.getAccount();
        User user = accounts.getUser();

        String currentBalance;
        if (transaction.getType() == TransactionType.INITIALBALANCE) {
            currentBalance = String.format("%.2f", transaction.getAmount());
        } else {
            currentBalance = String.format("%.2f", accounts.getBalance());
        }

        String subject = "Transaction Confirmation";
        String mailText =  "<!DOCTYPE html>"
                + "<html>"
                + "<head>"
                + "<style>"
                + "  body { font-family: Arial, sans-serif; line-height: 1.6; }"
                + "  .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 10px; }"
                + "  .header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 10px 10px 0 0; }"
                + "  .content { padding: 20px; }"
                + "  .footer { font-size: 0.9em; color: #777; margin-top: 20px; text-align: center; }"
                + "</style>"
                + "</head>"
                + "<body>"
                + "  <div class='container'>"
                + "    <div class='header'>"
                + "      <h2>Congratulations!!</h2>"
                + "    </div>"
                + "    <div class='content'>"
                + "<p>Dear " + user.getName() + ",</p>"
                + "<p>TK " + String.format("%.2f", transaction.getAmount()) + " " + transaction.getType()
                + " successful on " + transaction.getTransactionTime()
                + " From Account ID: "+accounts.getId()
                + " Your Current balance is " + currentBalance + "</p>"
                + "<p>Thanks for staying with us.</p>"
                + "    <div class='footer'>"
                + "      <p> Sincerely,</p>"
                + "      <p>MK Bank Ltd.</p>"
                + "    </div>"
                + "  </div>"
                + "</body>"
                + "</html>";

        try {
            emailService.sendSimpleEmail(user.getEmail(), subject, mailText);
        } catch (MessagingException e) {
            throw new RuntimeException("Failed to send transaction email", e);
        }
    }


 <div class="container mt-4">
  <h3>Add Transaction (Manual Account ID)</h3>

  <form [formGroup]="transactionForm" (ngSubmit)="onSubmit()">
    <!-- Account ID -->
    <div class="mb-3">
      <label for="accountId">Account ID</label>
      <input
        id="accountId"
        type="text"
        class="form-control"
        formControlName="accountId"
        placeholder="Enter Account ID"
      />
    </div>

    <!-- Transaction Type -->
    <div class="mb-3">
      <label for="type">Transaction Type</label>
      <select id="type" class="form-select" formControlName="type">
        <option value="">-- Select --</option>
        <option value="DEPOSIT">Deposit</option>
        <option value="WITHDRAW">Withdraw</option>
        <option value="TRANSFER">Transfer</option>
      </select>
    </div>

    <!-- Receiver Account ID -->
    <div class="mb-3" *ngIf="transactionForm.get('type')?.value === 'Transfer'">
      <label for="receiverAccountId">Receiver Account ID</label>
      <input
        id="receiverAccountId"
        type="text"
        class="form-control"
        formControlName="receiverAccountId"
        placeholder="Enter Receiver Account ID"
      />
    </div>

    <!-- Amount -->
    <div class="mb-3">
      <label for="amount">Amount</label>
      <input
        id="amount"
        type="number"
        class="form-control"
        formControlName="amount"
        placeholder="Enter Amount"
      />
    </div>

    <!-- Description -->
    <div class="mb-3">
      <label for="description">Description</label>
      <textarea
        id="description"
        class="form-control"
        formControlName="description"
        placeholder="Optional Description"
      ></textarea>
    </div>

    <button type="submit" class="btn btn-primary" [disabled]="transactionForm.invalid">
      Submit Transaction
    </button>
  </form>
 </div>

