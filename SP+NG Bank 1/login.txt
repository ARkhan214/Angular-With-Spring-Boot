import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { UserService } from '../../service/user.service';
import { User } from '../../model/user.model';
import { AuthResponse } from '../../model/authResponse.model';
import { AuthService } from '../../service/auth-service';
import { Role } from '../../model/role.model';
import { AlertService } from '../../service/alert-service';

@Component({
  selector: 'app-login',
  standalone: false,
  templateUrl: './login.html',
  styleUrl: './login.css'
})
export class Login {

  user: Partial<User> = {
    email: '',
    password: ''
  };

  errorMessage: string = '';
  successMessage: string = '';

  constructor(
    private userService: UserService,
    private router: Router,
    private authService: AuthService,
    private alertService:AlertService
  ) { }


onSubmit() {
    if (!this.user.email || !this.user.password) {
      this.errorMessage = 'Email and password are required!';
      return;
    }

    this.authService.login(this.user.email, this.user.password).subscribe({
      next: (response: AuthResponse) => {
        console.log("Login successful:", response);
        this.alertService.success('Login successful');
        this.successMessage = response.message;
        this.errorMessage = '';

        // Decode token for account id if needed
        const payload = JSON.parse(atob(response.token.split('.')[1]));
        const accountId = payload.id;
        console.log("Account id:", accountId);

        // Redirect by role
        const role: Role = payload.role as Role;

        if (role === Role.ADMIN) {
          this.router.navigate(['/admin-profile']);
        } else if (role === Role.EMPLOYEE) {
          this.router.navigate(['/employee-profile']);
        } else if (role === Role.USER) {
          this.router.navigate(['/account-profile']);
        } else {
          this.router.navigate(['/']);
        }
      },
      error: (err) => {
        console.error("Login failed:", err);
        this.errorMessage = "Invalid email or password!";
        this.successMessage = '';
      }
    });
  }



}  
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { BehaviorSubject, catchError, map, Observable } from 'rxjs';
import { User } from '../model/user.model';
import { isPlatformBrowser } from '@angular/common';
import { AuthResponse } from '../model/authResponse.model';
import { environment } from '../environment/environment';
import { Router } from '@angular/router';
import { Role } from '../model/role.model';
import { AlertService } from './alert-service';

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  private baseUrl = environment.springUrl;
  private headers = new HttpHeaders({ 'Content-Type': 'application/json' });


  // userRoleSubject type now uses enum
  private userRoleSubject: BehaviorSubject<Role | null> = new BehaviorSubject<Role | null>(null);
  public userRole$: Observable<Role | null> = this.userRoleSubject.asObservable();


  constructor(
    private alertService: AlertService,
    private http: HttpClient,
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {
    // Load role from localStorage on service init
    this.loadUserRoleFromStorage();
  }


  private isBrowser(): boolean {
    return isPlatformBrowser(this.platformId);
  }

  private loadUserRoleFromStorage() {
    if (this.isBrowser()) {
      const role = localStorage.getItem('userRole') as Role | null;
      if (role) {
        this.userRoleSubject.next(role);
      }
    }
  }



  login(email: string, password: string): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(this.baseUrl + '/user/login', { email, password }, { headers: this.headers }).pipe(
      map((response: AuthResponse) => {
        if (this.isBrowser() && response.token) {
          localStorage.setItem('authToken', response.token);

          // Decode JWT token
          const decodeToken = this.decodeToken(response.token);

          // Use enum Role
          const role: Role = decodeToken.role as Role;
          this.setUserRole(role);
        }
        return response;
      })
    );
  }

  // setUserRole using enum
  setUserRole(role: Role) {
    this.userRoleSubject.next(role);
    if (this.isBrowser()) {
      localStorage.setItem('userRole', role);
    }
  }

  // getUserRole returns enum
  getUserRole(): Role | null {
    if (this.isBrowser()) {
      const role = localStorage.getItem('userRole');
      return role as Role | null;
    }
    return null;
  }



  decodeToken(token: string) {
    const payload = token.split('.')[1];
    return JSON.parse(atob(payload));

  }

  getToken(): string | null {
    if (this.isBrowser()) {
      return localStorage.getItem('authToken');
    }
    return null;
  }

  isTokenExpired(token: string): boolean {
    const docodeToken = this.decodeToken(token);

    const expiry = docodeToken.exp * 1000;
    return Date.now() > expiry;
  }

  isLoggIn(): boolean {
    const token = this.getToken();
    if (token && !this.isTokenExpired(token)) {
      return true;
    }
    this.logout();
    return false;

  }


  logout(): void {
  if (this.isBrowser()) {
    const token = localStorage.getItem('authToken');
    const role = localStorage.getItem('userRole');

    if (!token || !role) {
      this.alertService.warning('You are not logged in!', 'Logout Failed');
      return;
    }

    // browser built-in confirm dialog
    const confirmed = window.confirm('Do you really want to logout?');

    if (confirmed) {
      localStorage.removeItem('userRole');
      localStorage.removeItem('authToken');
      this.userRoleSubject.next(null);

      this.router.navigate(['/']).then(() => {
        // SweetAlert success message
        this.alertService.success('You have been logged out successfully!', 'Logged Out');
      });
    } else {
      // SweetAlert info message
      this.alertService.info('Logout cancelled', 'Cancelled');
    }
  }
}




  // logout(): void {
  //   if (this.isBrowser()) {
  //     const token = localStorage.getItem('authToken');
  //     const role = localStorage.getItem('userRole');

  //     if (!token || !role) {
  //       this.alertService.warning('You are not logged in!', 'Logout Failed');
  //       return;
  //     }
      
  //     this.alertService.confirm('Do you really want to logout?', 'Logout Confirmation')
  //       .then((result) => {
  //         if (result.isConfirmed) {
  //           localStorage.removeItem('userRole');
  //           localStorage.removeItem('authToken');
  //           this.userRoleSubject.next(null);

  //           this.router.navigate(['/']).then(() => {
  //             this.alertService.success('You have been logged out successfully!', 'Logged Out');
  //           });
  //         } else {
  //           this.alertService.info('Logout cancelled', 'Cancelled');
  //         }
  //       });
  //   }
  // }



  // logout(): void {
  //   if (this.isBrowser()) {
  //     // alert('You have been logged out successfully!');
  //     this.alertService.confirm('');
  //     localStorage.removeItem('userRole');
  //     localStorage.removeItem('authToken');
  //     this.userRoleSubject.next(null);
  //   }
  //   this.router.navigate(['/']);
  // }


  hasRole(roles: Role[]): boolean {
    const userRole = this.getUserRole();
    return userRole ? roles.includes(userRole) : false;
  }

}
import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { UserService } from '../../service/user.service';
import { AuthService } from '../../service/auth-service';
import { Role } from '../../model/role.model';

@Component({
  selector: 'app-sidebar',
  standalone: false,
  templateUrl: './sidebar.html',
  styleUrl: './sidebar.css'
})
export class Sidebar implements OnInit {


  userRole: string | null = null;

  constructor(
    private authService: AuthService,
    private userService: UserService
  ) { }

  //   ngOnInit(): void {
  //   this.userService.currentUser$.subscribe(user=>{
  //     this.userRole = user?.role || '';
  //   })
  // }

  // ngOnInit(): void {
  //   this.userRole = this.authService.getUserRole();
  //   console.log('Sidebar loaded with role:', this.userRole);
  // }

  ngOnInit(): void {
    this.authService.userRole$.subscribe(role => {
      this.userRole = role;
      console.log('Sidebar loaded with role:', this.userRole);
    });
  }



  logout() {
    this.authService.logout();
  }


  isAdmin(): boolean {
    return this.userRole === Role.ADMIN;
  }

  isUser(): boolean {
    return this.userRole === Role.USER;
  }

  isEmployee(): boolean {
    return this.userRole === Role.EMPLOYEE;
  }

  
    isLoggIn(): boolean {
    const token = this.authService.getToken();
    if (token && !this.authService.isTokenExpired(token)) {
      return true;
    }
    this.authService.logout();
    return false;

  }

  //    userType: string = '';

  // constructor(
  //   private userService: UserService
  // ){}

  // ngOnInit(): void {
  //   this.userService.currentUser$.subscribe(user=>{
  //     this.userType = user?.type || '';
  //   })
  // }

}  

eta amar sidebar html.

    <li class="nav-item">
        <a class="nav-link fw-semibold d-flex align-items-center gap-2" routerLink="/login"
            style="color: #198754; border: 1px solid transparent; padding: 8px 15px; border-radius: 25px; transition: all 0.3s ease;"
            onmouseover="this.style.background='#d1f7d6'; this.style.border='1px solid #198754'; this.style.color='#198754';"
            onmouseout="this.style.background='transparent'; this.style.border='1px solid transparent'; this.style.color='#198754';">
            <i class="fa fa-sign-in-alt me-1"></i>
            <span>Login</span>
        </a>
    </li> 

ebar sono .ami chai kono user ba admin ba employee login kora thakle tar sidebar theke login er option hide hobe.abar logout korle abar sidebar e login dekha jabe.