
*********************18-09-2025*****Start**********
import { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { TransactionDTO } from '../../model/transactionStatementDTO.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from '../../environment/environment';
import { Transactionsservice } from '../../service/transactionsservice';


// Import jsPDF and html2canvas for PDF export
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { TransactionType } from '../../model/transactionType.model';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-acc-tran-statement',
  standalone: false,
  templateUrl: './acc-tran-statement.html',
  styleUrl: './acc-tran-statement.css'
})
export class AccTranStatement implements OnInit {


  @ViewChild('transactionTable') transactionTable!: ElementRef; // Get table reference

  transactions: TransactionDTO[] = [];
  loading: boolean = true;
  errorMessage: string = '';

  totalWithdraw: number = 0;
  totalDeposit: number = 0;
  totalBalance: number = 0;

  //For Traansaction Statement Filter Start-------------------
  startDate: string = '';
  endDate: string = '';
  type: string = '';
  transactionType!: TransactionType;
  //For Traansaction Statement Filter End----------------------


  private baseUrl = environment.springUrl;

  constructor(
    private http: HttpClient,
    private transactionService: Transactionsservice,
    private cdr: ChangeDetectorRef


  ) { }

  ngOnInit(): void {
    // this.getTransactionStatement();

    this.transactionService.getStatement().subscribe({
      next: (data) => {
        this.transactions = data;
        console.log(data + "Profile data ");
        this.computeTotals();
        this.cdr.markForCheck();

      },
      error: (err) => {
        console.error('Failed to load profile', err);
      }
    });
  }

  computeTotals() {
    this.totalWithdraw = 0;
    this.totalDeposit = 0;
    this.totalBalance = 0;

    let runningBalance = 0;

    for (let tx of this.transactions) {
      if (tx.type === 'DEBIT') {
        this.totalWithdraw += tx.amount!;
        runningBalance -= tx.amount!;
      } else if (tx.type === 'CREDIT') {
        this.totalDeposit += tx.amount!;
        runningBalance += tx.amount!;
      }

      // প্রতিটি ট্রানজেকশনের জন্য running balance সেট
      tx.runningBalance = runningBalance;
    }

    this.totalBalance = runningBalance;
  }



  //For Traansaction Statement Filter Start---------------------
  applyFilter() {
    this.loading = true;
    this.errorMessage = '';

    this.transactionService.getTransactionsWithFilterForAccountHolder(
      this.startDate,
      this.endDate,
      this.type,
      this.transactionType
    ).subscribe({
      next: (data) => {
        this.transactions = data;
        this.loading = false;
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Failed to load filtered transactions', err);
        this.errorMessage = 'Failed to load filtered transactions';
        this.transactions = [];
        this.loading = false;
      }
    });
  }


  onTypeChange() {
    this.applyFilter();
  }


  //For Traansaction Statement Filter End------------




  // exportPDF() {
  //   if (!this.transactions || this.transactions.length === 0) {
  //     console.error('No transactions to export.');
  //     return;
  //   }

  //   const data = this.transactionTable?.nativeElement;
  //   if (!data) {
  //     console.error('Table element not found for PDF export');
  //     return;
  //   }

  //   html2canvas(data, { scale: 2 }).then(canvas => {
  //     const imgWidth = 180; // Table image width
  //     const imgHeight = canvas.height * imgWidth / canvas.width;
  //     const contentDataURL = canvas.toDataURL('image/png');

  //     const pdf = new jsPDF('p', 'mm', 'a4');

  //     // ---------- Header ----------
  //     pdf.setTextColor(0, 51, 102); // Dark blue
  //     pdf.setFontSize(20);
  //     pdf.text('MK Bank', 105, 15, { align: 'center' });

  //     pdf.setTextColor(0, 0, 0); // Black for subtitle
  //     pdf.setFontSize(16);
  //     pdf.text('Transaction Statement', 105, 25, { align: 'center' });

  //     // ---------- Account Info ----------
  //     const account = this.transactions[0].account;

  //     pdf.setFontSize(12);
  //     pdf.setTextColor(0, 0, 0); // black text
  //     pdf.text(`Account Holder: ${account.name}`, 15, 35);
  //     pdf.text(`Customer ID: ${account.id}`, 15, 42);
  //     pdf.text(`Address: ${account.address}`, 15, 49);
  //     pdf.text(`Account Type: ${account.accountType}`, 15, 56);
  //     pdf.text(`Opening Date: ${account.accountOpeningDate}`, 15, 63);
  //     pdf.text(`Telephone: ${account.phoneNumber}`, 15, 70);

  //     // ---------- Add Table Image ----------
  //     const tableY = 75; // Leave space after header
  //     pdf.addImage(contentDataURL, 'PNG', 15, tableY, imgWidth, imgHeight);

  //     // Save PDF
  //     pdf.save('transaction-statement.pdf');
  //   });
  // }


  exportPDF() {
    if (!this.transactions || this.transactions.length === 0) {
      console.error('No transactions to export.');
      return;
    }

    const pdf = new jsPDF('p', 'mm', 'a4');

    // -------- Header Section ----------
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 51, 102);
    pdf.setFontSize(22);
    pdf.text('MK Bank PLC.', 105, 15, { align: 'center' });

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(12);
    pdf.setTextColor(80);
    pdf.text('Head Office, Dhaka', 105, 22, { align: 'center' });
    pdf.setTextColor(120, 120, 120);
    pdf.text('Trusted Banking Partner Since 1990', 105, 28, { align: 'center' });


    // Decorative Line
    pdf.setDrawColor(0, 51, 102);
    pdf.setLineWidth(0.6);
    pdf.line(15, 34, 195, 34);

    // -------- Customer Info Section ----------
    const account = this.transactions[0].account;

    pdf.setFontSize(13);
    pdf.setTextColor(0, 51, 102);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Customer Information', 15, 45);

    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');

    // Left Column
    pdf.setTextColor(60);
    pdf.text(`Customer ID:`, 15, 55);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${account.id}`, 50, 55);

    pdf.setTextColor(60);
    pdf.text(`Name:`, 15, 62);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${account.name}`, 50, 62);

    pdf.setTextColor(60);
    pdf.text(`Address:`, 15, 69);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${account.address}`, 50, 69);

    // Right Column
    pdf.setTextColor(60);
    pdf.text(`Account Type:`, 110, 55);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${account.accountType}`, 150, 55);


    // Opening Date formatting
    const openingDate = account.accountOpeningDate
      ? new Date(account.accountOpeningDate).toISOString().split('T')[0]
      : '---';

    pdf.setTextColor(60);
    pdf.text(`Opening Date:`, 110, 62);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${openingDate}`, 150, 62);


    pdf.setTextColor(60);
    pdf.text(`Telephone:`, 110, 69);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${account.phoneNumber}`, 150, 69);

    // -------- Report Date (Top Right, before table) ----------
    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 51, 102);

    const generatedDate = new Date().toLocaleString();

    pdf.text(
      `Report generated: ${generatedDate}`,
      195,
      85,
      { align: 'right' }
    );

    // -------- Transactions Table ----------
    const tableRows: any[] = [];

    this.transactions.forEach(tx => {
      tableRows.push([
        tx.transactionTime ? new Date(tx.transactionTime).toLocaleDateString() : '',
        tx.description || '',
        tx.id || '',
        tx.receiverAccount?.name || '',
        tx.type || '',
        tx.transactionType || '',
        tx.type === 'DEBIT' ? tx.amount?.toFixed(2) : '',
        tx.type === 'CREDIT' ? tx.amount?.toFixed(2) : '',
        tx.runningBalance?.toFixed(2) || ''
      ]);
    });

    // Totals row
    tableRows.push([
      "", "TOTAL", "", "", "", "",
      this.totalWithdraw.toFixed(2),
      this.totalDeposit.toFixed(2),
      this.totalBalance.toFixed(2)
    ]);

    // AutoTable
    autoTable(pdf, {
      head: [['Date', 'Particulars', 'Instrument No', 'Receiver', 'Type', 'Transaction Type', 'Withdraw', 'Deposit', 'Balance']],
      body: tableRows,
      startY: 95,
      theme: 'grid',
      headStyles: {
        fillColor: [0, 51, 102],
        textColor: [255, 255, 255],
        fontStyle: 'bold',
        halign: 'center'
      },
      styles: { fontSize: 9, cellPadding: 2 },
      alternateRowStyles: { fillColor: [240, 248, 255] },
      footStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0], fontStyle: 'bold' }
    });

    // -------- Footer ----------
    const finalY = (pdf as any).lastAutoTable.finalY + 15;
    pdf.setFontSize(9);
    pdf.setTextColor(100);
    pdf.text(
      "This report has been generated from MK Bank iBanking based on available data. No signature required.",
      15,
      finalY
    );

    // Save file
    pdf.save('transaction-statement.pdf');

  }

}

<<<=============================================>>>

<div class=" p-4 border rounded shadow-sm bg-white">
  <h2 class="mb-4">Transaction Statement</h2>

  <!-- Loading & Error Messages -->
  <div *ngIf="loading" class="alert alert-info">
    Loading transactions...
  </div>

  <div *ngIf="errorMessage" class="alert alert-danger">
    {{ errorMessage }}
  </div>

  <!-- Filter Section -->
  <div class="filter-section mb-4 p-3 border rounded shadow-sm bg-light" *ngIf="transactions.length > 0">
    <h4 class="mb-3 text-primary">Filter Transactions</h4>
    <div class="row g-3 align-items-end">
      <div class="col-md-3">
        <label class="form-label fw-bold">Start Date:</label>
        <input type="date" class="form-control" [(ngModel)]="startDate" />
      </div>
      <div class="col-md-3">
        <label class="form-label fw-bold">End Date:</label>
        <input type="date" class="form-control" [(ngModel)]="endDate" />
      </div>
      <div class="col-md-2">
        <label class="form-label fw-bold">Type:</label>
        <select class="form-select" [(ngModel)]="type" (change)="onTypeChange()">
          <option value="">All</option>
          <option value="DEBIT">Debit</option>
          <option value="CREDIT">Credit</option>
        </select>
      </div>
      <div class="col-md-3">
        <label class="form-label fw-bold">Transaction Type:</label>
        <input type="text" class="form-control" [(ngModel)]="transactionType" placeholder="e.g. TRANSFER" />
      </div>
      <div class="col-md-1 d-flex align-items-end">
        <button class="btn btn-success w-100" (click)="applyFilter()">
          <i class="bi bi-funnel"></i> Apply
        </button>
      </div>
    </div>
  </div>

  <!-- PDF Export Button -->
  <div class="mb-3 text-end" *ngIf="transactions.length > 0">
    <button class="btn btn-danger" (click)="exportPDF()">
      <i class="bi bi-file-earmark-pdf"></i> Save as PDF
    </button>
  </div>

  <!-- Transaction Table -->
  <div #transactionTable *ngIf="transactions.length > 0" class="table-responsive">
    <table class="table table-striped table-bordered">
      <thead class="table-dark">
        <tr>
          <th>Trans Date</th>
          <th>Particulars</th>
          <th>Instrument No</th>

          <th>Receiver</th>
          <th>Type</th>
          <th>Transaction Type</th>
          <th>Withdraw Amount</th>
          <th>Deposit Amount</th>
          <th>Balance</th>


          <th>Company Name</th>
          <th>Billing ID</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let tx of transactions">
          <td>{{ tx.transactionTime | date:'short' }}</td>
          <td>{{ tx.description }}</td>
          <td>{{ tx.id }}</td>

          <td>{{ tx.receiverAccount?.name }}</td>
          <td [ngClass]="{'debit': tx.type === 'DEBIT', 'credit': tx.type === 'CREDIT'}">
            {{ tx.type }}
          </td>
          <td>{{ tx.transactionType }}</td>

          <!-- Withdraw Amount (only if DEBIT) -->
          <td>
            <span *ngIf="tx.type === 'DEBIT'">{{ tx.amount | number:'1.2-2' }}</span>
          </td>

          <!-- Deposit Amount (only if CREDIT) -->
          <td>
            <span *ngIf="tx.type === 'CREDIT'">{{ tx.amount | number:'1.2-2' }}</span>
          </td>

          <!-- Always show total Amount -->
          <td>{{ tx.runningBalance | number:'1.2-2' }}</td>

          <td>{{ tx.companyName }}</td>
          <td>{{ tx.accountHolderBillingId }}</td>
        </tr>

        <!-- Totals Row -->
        <tr class="table-secondary fw-bold">
          <td colspan="6" class="text-end">Totals</td>
          <td>{{ totalWithdraw | number:'1.2-2' }}</td>
          <td>{{ totalDeposit | number:'1.2-2' }}</td>
          <td>{{ totalBalance | number:'1.2-2' }}</td>
          <td colspan="2"></td>
        </tr>
      </tbody>
    </table>
  </div>

  <div *ngIf="transactions.length === 0 && !loading" class="alert alert-warning">
    No transactions found.
  </div>
</div>

*****************18-092025*********END**************




=================================17-09-2025 start========
=============================Ts
import { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { TransactionDTO } from '../../model/transactionStatementDTO.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from '../../environment/environment';
import { Transactionsservice } from '../../service/transactionsservice';


// Import jsPDF and html2canvas for PDF export
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { TransactionType } from '../../model/transactionType.model';

@Component({
  selector: 'app-acc-tran-statement',
  standalone: false,
  templateUrl: './acc-tran-statement.html',
  styleUrl: './acc-tran-statement.css'
})
export class AccTranStatement implements OnInit {


  @ViewChild('transactionTable') transactionTable!: ElementRef; // Get table reference

  transactions: TransactionDTO[] = [];
  loading: boolean = true;
  errorMessage: string = '';

  totalWithdraw: number = 0;
  totalDeposit: number = 0;
  totalBalance: number = 0;

  //For Traansaction Statement Filter Start-------------------
  startDate: string = '';
  endDate: string = '';
  type: string = '';
  transactionType!: TransactionType;
  //For Traansaction Statement Filter End----------------------


  private baseUrl = environment.springUrl;

  constructor(
    private http: HttpClient,
    private transactionService: Transactionsservice,
    private cdr: ChangeDetectorRef


  ) { }

  ngOnInit(): void {
    // this.getTransactionStatement();

    this.transactionService.getStatement().subscribe({
      next: (data) => {
        this.transactions = data;
        console.log(data + "Profile data ");
        this.computeTotals();
        this.cdr.markForCheck();

      },
      error: (err) => {
        console.error('Failed to load profile', err);
      }
    });
  }

computeTotals() {
  this.totalWithdraw = 0;
  this.totalDeposit = 0;
  this.totalBalance = 0;

  let runningBalance = 0;

  for (let tx of this.transactions) {
    if (tx.type === 'DEBIT') {
      this.totalWithdraw += tx.amount!;
      runningBalance -= tx.amount!;
    } else if (tx.type === 'CREDIT') {
      this.totalDeposit += tx.amount!;
      runningBalance += tx.amount!;
    }

    // প্রতিটি ট্রানজেকশনের জন্য running balance সেট
    tx.runningBalance = runningBalance;
  }

  this.totalBalance = runningBalance;
}



  //For Traansaction Statement Filter Start---------------------
  applyFilter() {
    this.loading = true;
    this.errorMessage = '';

    this.transactionService.getTransactionsWithFilterForAccountHolder(
      this.startDate,
      this.endDate,
      this.type,
      this.transactionType
    ).subscribe({
      next: (data) => {
        this.transactions = data;
        this.loading = false;
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Failed to load filtered transactions', err);
        this.errorMessage = 'Failed to load filtered transactions';
        this.transactions = [];
        this.loading = false;
      }
    });
  }


  onTypeChange(){
    this.applyFilter();
  }


  //For Traansaction Statement Filter End------------




exportPDF() {
  if (!this.transactions || this.transactions.length === 0) {
    console.error('No transactions to export.');
    return;
  }

  const data = this.transactionTable?.nativeElement;
  if (!data) {
    console.error('Table element not found for PDF export');
    return;
  }

  html2canvas(data, { scale: 2 }).then(canvas => {
    const imgWidth = 180; // Table image width
    const imgHeight = canvas.height * imgWidth / canvas.width;
    const contentDataURL = canvas.toDataURL('image/png');

    const pdf = new jsPDF('p', 'mm', 'a4');

    // ---------- Header ----------
    pdf.setTextColor(0, 51, 102); // Dark blue
    pdf.setFontSize(20);
    pdf.text('MK Bank', 105, 15, { align: 'center' });

    pdf.setTextColor(0, 0, 0); // Black for subtitle
    pdf.setFontSize(16);
    pdf.text('Transaction Statement', 105, 25, { align: 'center' });

    // ---------- Account Info ----------
    const account = this.transactions[0].account;

    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0); // black text
    pdf.text(`Account Holder: ${account.name}`, 15, 35);
    pdf.text(`Customer ID: ${account.id}`, 15, 42);
    pdf.text(`Address: ${account.address}`, 15, 49);
    pdf.text(`Account Type: ${account.accountType}`, 15, 56);
    pdf.text(`Opening Date: ${account.accountOpeningDate}`, 15, 63);
    pdf.text(`Telephone: ${account.phoneNumber}`, 15, 70);

    // ---------- Add Table Image ----------
    const tableY = 75; // Leave space after header
    pdf.addImage(contentDataURL, 'PNG', 15, tableY, imgWidth, imgHeight);

    // Save PDF
    pdf.save('transaction-statement.pdf');
  });
}


}
===========================html
<div class=" p-4 border rounded shadow-sm bg-white">
  <h2 class="mb-4">Transaction Statement</h2>

  <!-- Loading & Error Messages -->
  <div *ngIf="loading" class="alert alert-info">
    Loading transactions...
  </div>

  <div *ngIf="errorMessage" class="alert alert-danger">
    {{ errorMessage }}
  </div>

  <!-- Filter Section -->
  <div class="filter-section mb-4 p-3 border rounded shadow-sm bg-light" *ngIf="transactions.length > 0">
    <h4 class="mb-3 text-primary">Filter Transactions</h4>
    <div class="row g-3 align-items-end">
      <div class="col-md-3">
        <label class="form-label fw-bold">Start Date:</label>
        <input type="date" class="form-control" [(ngModel)]="startDate" />
      </div>
      <div class="col-md-3">
        <label class="form-label fw-bold">End Date:</label>
        <input type="date" class="form-control" [(ngModel)]="endDate" />
      </div>
      <div class="col-md-2">
        <label class="form-label fw-bold">Type:</label>
        <select class="form-select" [(ngModel)]="type" (change)="onTypeChange()">
          <option value="">All</option>
          <option value="DEBIT">Debit</option>
          <option value="CREDIT">Credit</option>
        </select>
      </div>
      <div class="col-md-3">
        <label class="form-label fw-bold">Transaction Type:</label>
        <input type="text" class="form-control" [(ngModel)]="transactionType" placeholder="e.g. TRANSFER" />
      </div>
      <div class="col-md-1 d-flex align-items-end">
        <button class="btn btn-success w-100" (click)="applyFilter()">
          <i class="bi bi-funnel"></i> Apply
        </button>
      </div>
    </div>
  </div>

  <!-- PDF Export Button -->
  <div class="mb-3 text-end" *ngIf="transactions.length > 0">
    <button class="btn btn-danger" (click)="exportPDF()">
      <i class="bi bi-file-earmark-pdf"></i> Save as PDF
    </button>
  </div>

  <!-- Transaction Table -->
  <div #transactionTable *ngIf="transactions.length > 0" class="table-responsive">
    <table class="table table-striped table-bordered">
      <thead class="table-dark">
        <tr>
          <th>Trans Date</th>
          <th>Particulars</th>
          <th>Instrument No</th>

          <th>Receiver</th>
          <th>Type</th>
          <th>Transaction Type</th>
          <th>Withdraw Amount</th>
          <th>Deposit Amount</th>
          <th>Balance</th>


          <th>Company Name</th>
          <th>Billing ID</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let tx of transactions">
          <td>{{ tx.transactionTime | date:'short' }}</td>
          <td>{{ tx.description }}</td>
          <td>{{ tx.id }}</td>

          <td>{{ tx.receiverAccount?.name }}</td>
          <td [ngClass]="{'debit': tx.type === 'DEBIT', 'credit': tx.type === 'CREDIT'}">
            {{ tx.type }}
          </td>
          <td>{{ tx.transactionType }}</td>

          <!-- Withdraw Amount (only if DEBIT) -->
          <td>
            <span *ngIf="tx.type === 'DEBIT'">{{ tx.amount | number:'1.2-2' }}</span>
          </td>

          <!-- Deposit Amount (only if CREDIT) -->
          <td>
            <span *ngIf="tx.type === 'CREDIT'">{{ tx.amount | number:'1.2-2' }}</span>
          </td>

          <!-- Always show total Amount -->
          <td>{{ tx.runningBalance | number:'1.2-2' }}</td>

          <td>{{ tx.companyName }}</td>
          <td>{{ tx.accountHolderBillingId }}</td>
        </tr>

        <!-- Totals Row -->
        <tr class="table-secondary fw-bold">
          <td colspan="6" class="text-end">Totals</td>
          <td>{{ totalWithdraw | number:'1.2-2' }}</td>
          <td>{{ totalDeposit | number:'1.2-2' }}</td>
          <td>{{ totalBalance | number:'1.2-2' }}</td>
          <td colspan="2"></td>
        </tr>
      </tbody>
    </table>
  </div>

  <div *ngIf="transactions.length === 0 && !loading" class="alert alert-warning">
    No transactions found.
  </div>
</div>

------------------------------------------
----------------------------------------
----------------------------------------
=============================AFTER EDIT+++++++++++


import { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { TransactionDTO } from '../../model/transactionStatementDTO.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from '../../environment/environment';
import { Transactionsservice } from '../../service/transactionsservice';


// Import jsPDF and html2canvas for PDF export
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

@Component({
  selector: 'app-acc-tran-statement',
  standalone: false,
  templateUrl: './acc-tran-statement.html',
  styleUrl: './acc-tran-statement.css'
})
export class AccTranStatement implements OnInit {


  @ViewChild('transactionTable') transactionTable!: ElementRef;

  transactions: TransactionDTO[] = [];
  loading: boolean = true;
  errorMessage: string = '';

  totalWithdraw: number = 0;
  totalDeposit: number = 0;
  totalBalance: number = 0;

  startDate: string = '';
  endDate: string = '';
  type: string = '';
  transactionType: string = '';

  today: Date = new Date(); // PDF print date

  constructor(
    private transactionService: Transactionsservice,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.loadTransactions();
  }

  loadTransactions() {
    this.transactionService.getStatement().subscribe({
      next: (data) => {
        this.transactions = data;
        this.computeTotals();
        this.loading = false;
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Failed to load transactions', err);
        this.errorMessage = 'Failed to load transactions';
        this.loading = false;
      }
    });
  }

  computeTotals() {
    let runningBalance = 0;
    this.totalWithdraw = 0;
    this.totalDeposit = 0;

    this.transactions.forEach(tx => {
      if (tx.type === 'DEBIT') {
        this.totalWithdraw += tx.amount!;
        runningBalance -= tx.amount!;
      } else if (tx.type === 'CREDIT') {
        this.totalDeposit += tx.amount!;
        runningBalance += tx.amount!;
      }
      tx.runningBalance = runningBalance;
    });

    this.totalBalance = runningBalance;
  }

  applyFilter() {
    this.loading = true;
    this.errorMessage = '';

    this.transactionService.getTransactionsWithFilterForAccountHolder(
      this.startDate, this.endDate, this.type, this.transactionType
    ).subscribe({
      next: (data) => {
        this.transactions = data;
        this.computeTotals();
        this.loading = false;
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Failed to load filtered transactions', err);
        this.errorMessage = 'Failed to load filtered transactions';
        this.transactions = [];
        this.loading = false;
      }
    });
  }

  // ---------------- PDF Export -----------------
  printStatement(): void {
    if (!this.transactions || this.transactions.length === 0) return;

    const element = this.transactionTable?.nativeElement;
    if (!element) return;

    // Temporarily show element if hidden
    element.style.visibility = 'visible';
    element.style.position = 'static';
    element.style.left = '0';

    setTimeout(() => {
      html2canvas(element, { scale: 2, useCORS: true }).then(canvas => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4');
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
        pdf.save(`transaction-statement.pdf`);

        // Hide element again
        element.style.visibility = 'hidden';
        element.style.position = 'absolute';
        element.style.left = '-9999px';
      });
    }, 300);
  }


}
----------------------------
<div *ngIf="transactions.length > 0" #transactionTable class="invoice-a4 p-4 bg-white shadow-sm rounded">

  <!-- Header -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <div>
      <h2 class="text-primary">MK Bank</h2>
      <div style="font-size:12px;color:#6c757d;">Transaction Statement</div>
    </div>
    <div style="text-align:right;">
      <div>Printed: <strong>{{ today | date:'mediumDate' }}</strong></div>
      <div>Total Transactions: <strong>{{ transactions.length }}</strong></div>
    </div>
  </div>

  <hr style="border:none;border-top:1px solid #e9ecef;margin:12px 0;" />

  <!-- Account Info -->
  <div class="mb-3">
    <div><strong>Account Holder:</strong> {{ transactions[0].account.name }}</div>
    <div><strong>Customer ID:</strong> {{ transactions[0].account.id }}</div>
    <div><strong>Address:</strong> {{ transactions[0].account.address }}</div>
    <div><strong>Account Type:</strong> {{ transactions[0].account.accountType }}</div>
    <div><strong>Opening Date:</strong> {{ transactions[0].account.accountOpeningDate }}</div>
    <div><strong>Telephone:</strong> {{ transactions[0].account.phoneNumber }}</div>
  </div>

  <!-- Transaction Table -->
  <div class="table-responsive">
    <table class="table table-striped table-bordered">
      <thead class="table-dark">
        <tr>
          <th>Date</th>
          <th>Description</th>
          <th>ID</th>
          <th>Receiver</th>
          <th>Type</th>
          <th>Transaction Type</th>
          <th>Withdraw</th>
          <th>Deposit</th>
          <th>Balance</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let tx of transactions">
          <td>{{ tx.transactionTime | date:'short' }}</td>
          <td>{{ tx.description }}</td>
          <td>{{ tx.id }}</td>
          <td>{{ tx.receiverAccount?.name }}</td>
          <td [ngClass]="{'debit': tx.type==='DEBIT','credit':tx.type==='CREDIT'}">{{ tx.type }}</td>
          <td>{{ tx.transactionType }}</td>
          <td>{{ tx.type==='DEBIT'? (tx.amount | number:'1.2-2') : '' }}</td>
          <td>{{ tx.type==='CREDIT'? (tx.amount | number:'1.2-2') : '' }}</td>
          <td>{{ tx.runningBalance | number:'1.2-2' }}</td>
        </tr>

        <!-- Totals Row -->
        <tr class="table-secondary fw-bold">
          <td colspan="6" class="text-end">Totals</td>
          <td>{{ totalWithdraw | number:'1.2-2' }}</td>
          <td>{{ totalDeposit | number:'1.2-2' }}</td>
          <td>{{ totalBalance | number:'1.2-2' }}</td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- Note -->
  <div class="mt-3">
    <strong>Note:</strong> This statement is system-generated for record purposes.
  </div>

</div>

<!-- Export Button -->
<div class="text-end mt-3" *ngIf="transactions.length > 0">
  <button class="btn btn-danger" (click)="printStatement()">Save as PDF</button>
</div>

=================================17-09-2025 end=========











===============================old======st===============

import { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { TransactionDTO } from '../../model/transactionStatementDTO.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from '../../environment/environment';
import { Transactionsservice } from '../../service/transactionsservice';


// Import jsPDF and html2canvas for PDF export
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

@Component({
  selector: 'app-acc-tran-statement',
  standalone: false,
  templateUrl: './acc-tran-statement.html',
  styleUrl: './acc-tran-statement.css'
})
export class AccTranStatement implements OnInit {


  @ViewChild('transactionTable') transactionTable!: ElementRef; // Get table reference

  transactions: TransactionDTO[] = [];
  loading: boolean = true;
  errorMessage: string = '';

  totalWithdraw: number = 0;
  totalDeposit: number = 0;
  totalBalance: number = 0;

  //For Traansaction Statement Filter Start-------------------
  startDate: string = '';
  endDate: string = '';
  type: string = '';
  transactionType: string = '';
  //For Traansaction Statement Filter End----------------------


  private baseUrl = environment.springUrl;

  constructor(
    private http: HttpClient,
    private transactionService: Transactionsservice,
    private cdr: ChangeDetectorRef


  ) { }

  ngOnInit(): void {
    // this.getTransactionStatement();

    this.transactionService.getStatement().subscribe({
      next: (data) => {
        this.transactions = data;
        console.log(data + "Profile data ");
        this.computeTotals();
        this.cdr.markForCheck();

      },
      error: (err) => {
        console.error('Failed to load profile', err);
      }
    });
  }

computeTotals() {
  this.totalWithdraw = 0;
  this.totalDeposit = 0;
  this.totalBalance = 0;

  let runningBalance = 0;

  for (let tx of this.transactions) {
    if (tx.type === 'DEBIT') {
      this.totalWithdraw += tx.amount!;
      runningBalance -= tx.amount!;
    } else if (tx.type === 'CREDIT') {
      this.totalDeposit += tx.amount!;
      runningBalance += tx.amount!;
    }

    // প্রতিটি ট্রানজেকশনের জন্য running balance সেট
    tx.runningBalance = runningBalance;
  }

  this.totalBalance = runningBalance;
}





  // computeTotals() {
  //   this.totalWithdraw = 0;
  //   this.totalDeposit = 0;
  //   this.totalBalance = 0;

  //   for (let tx of this.transactions) {
  //     if (tx.type === 'DEBIT') {
  //       this.totalWithdraw += tx.amount!;
  //     } else if (tx.type === 'CREDIT') {
  //       this.totalDeposit += tx.amount!;
  //     }

  //     this.totalBalance = tx.account.balance ?? tx.account.balance; // last balance
  //   }

  //   console.log(this.totalWithdraw + "  --1111111111111111111111111");
  //   console.log(this.totalDeposit + "   --22222222222222222222222222");
  //   console.log(this.totalBalance + "   --333333333333333333333333333");

  // }



  //For Traansaction Statement Filter Start---------------------
  applyFilter() {
    this.loading = true;
    this.errorMessage = '';

    this.transactionService.getTransactionsWithFilterForAccountHolder(
      this.startDate,
      this.endDate,
      this.type,
      this.transactionType
    ).subscribe({
      next: (data) => {
        this.transactions = data;
        this.loading = false;
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Failed to load filtered transactions', err);
        this.errorMessage = 'Failed to load filtered transactions';
        this.transactions = [];
        this.loading = false;
      }
    });
  }


  //For Traansaction Statement Filter End------------


  // ---------------- PDF Export Function -----------------
  // exportPDF() {
  //   const data = this.transactionTable?.nativeElement; // Get the table div via ViewChild
  //   if (data) {
  //     html2canvas(data).then(canvas => {
  //       const imgWidth = 208;
  //       const pageHeight = 295;
  //       const imgHeight = canvas.height * imgWidth / canvas.width;
  //       const contentDataURL = canvas.toDataURL('image/png');

  //       const pdf = new jsPDF('p', 'mm', 'a4');
  //       let position = 0;

  //       // ---------- Add Title/Header ----------
  //       pdf.setFontSize(18);
  //       pdf.text('MK Bank', 105, 10, { align: 'center' }); // Bank Name at top
  //       pdf.setFontSize(14);
  //       pdf.text('Transaction Statement', 105, 16, { align: 'center' }); // Statement title
  //       pdf.setFontSize(12);
  //       pdf.text(`Account Holder: ${this.transactions[0].accountHolderName}`, 14, 24); // example name
  //       pdf.text(`Account ID: ${this.transactions[0].id}`, 14, 30); // example account id



  //       pdf.addImage(contentDataURL, 'PNG', 0, position, imgWidth, imgHeight);
  //       pdf.save('transaction-statement.pdf');
  //     });
  //   } else {
  //     console.error('Table element not found for PDF export');
  //   }
  // }



  // exportPDF() {
  //   if (!this.transactions || this.transactions.length === 0) {
  //     console.error('No transactions to export.');
  //     return;
  //   }

  //   const data = this.transactionTable?.nativeElement;
  //   if (data) {
  //     html2canvas(data).then(canvas => {
  //       const imgWidth = 208; // A4 width
  //       const pageHeight = 295;
  //       const imgHeight = canvas.height * imgWidth / canvas.width;
  //       const contentDataURL = canvas.toDataURL('image/png');

  //       const pdf = new jsPDF('p', 'mm', 'a4');

  //       // ---------- Add Title/Header ----------
  //       pdf.setFontSize(18);
  //       pdf.text('MK Bank', 105, 10, { align: 'center' }); // Bank Name at top
  //       pdf.setFontSize(14);
  //       pdf.text('Transaction Statement', 105, 16, { align: 'center' }); // Statement title
  //       pdf.setFontSize(12);
  //       pdf.text(`Account Holder: ${this.transactions[0].account.name}`, 14, 24);
  //       pdf.text(`Account ID: ${this.transactions[0].account.id}`, 14, 30);

  //       // ---------- Add Table Image ----------
  //       let position = 35; // leave space for header
  //       pdf.addImage(contentDataURL, 'PNG', 0, position, imgWidth, imgHeight);

  //       pdf.save('transaction-statement.pdf');
  //     });
  //   } else {
  //     console.error('Table element not found for PDF export');
  //   }
  // }




  // exportPDF() {
  //   if (!this.transactions || this.transactions.length === 0) {
  //     console.error('No transactions to export.');
  //     return;
  //   }

  //   const data = this.transactionTable?.nativeElement;
  //   if (data) {
  //     html2canvas(data, { scale: 2 }).then(canvas => { // scale 2 improves image clarity
  //       const imgWidth = 180; // Leave 15mm margin on both sides for A4
  //       const pageHeight = 295;
  //       const imgHeight = canvas.height * imgWidth / canvas.width;
  //       const contentDataURL = canvas.toDataURL('image/png');

  //       const pdf = new jsPDF('p', 'mm', 'a4');

  //       // ---------- Add Title/Header ----------
  //       pdf.setFontSize(18);
  //       pdf.text('MK Bank', 105, 15, { align: 'center' });
  //       pdf.setFontSize(14);
  //       pdf.text('Transaction Statement', 105, 25, { align: 'center' });
  //       pdf.setFontSize(12);
  //       pdf.text(`Account Holder: ${this.transactions[0].account.name}`, 15, 35);
  //       pdf.text(`Account ID: ${this.transactions[0].account.id}`, 15, 42);

  //       // ---------- Add Table Image ----------
  //       let position = 50; // Leave space for header
  //       pdf.addImage(contentDataURL, 'PNG', 15, position, imgWidth, imgHeight); // 15mm left margin

  //       pdf.save('transaction-statement.pdf');
  //     });
  //   } else {
  //     console.error('Table element not found for PDF export');
  //   }
  // }


exportPDF() {
  if (!this.transactions || this.transactions.length === 0) {
    console.error('No transactions to export.');
    return;
  }

  const data = this.transactionTable?.nativeElement;
  if (!data) {
    console.error('Table element not found for PDF export');
    return;
  }

  html2canvas(data, { scale: 2 }).then(canvas => {
    const imgWidth = 180; // Table image width
    const imgHeight = canvas.height * imgWidth / canvas.width;
    const contentDataURL = canvas.toDataURL('image/png');

    const pdf = new jsPDF('p', 'mm', 'a4');

    // ---------- Header ----------
    pdf.setTextColor(0, 51, 102); // Dark blue
    pdf.setFontSize(20);
    pdf.text('MK Bank', 105, 15, { align: 'center' });

    pdf.setTextColor(0, 0, 0); // Black for subtitle
    pdf.setFontSize(16);
    pdf.text('Transaction Statement', 105, 25, { align: 'center' });

    // ---------- Account Info ----------
    const account = this.transactions[0].account;

    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0); // black text
    pdf.text(`Account Holder: ${account.name}`, 15, 35);
    pdf.text(`Customer ID: ${account.id}`, 15, 42);
    pdf.text(`Address: ${account.address}`, 15, 49);
    pdf.text(`Account Type: ${account.accountType}`, 15, 56);
    pdf.text(`Opening Date: ${account.accountOpeningDate}`, 15, 63);
    pdf.text(`Telephone: ${account.phoneNumber}`, 15, 70);

    // ---------- Add Table Image ----------
    const tableY = 75; // Leave space after header
    pdf.addImage(contentDataURL, 'PNG', 15, tableY, imgWidth, imgHeight);

    // Save PDF
    pdf.save('transaction-statement.pdf');
  });
}


}
-----------------------------
<div class=" p-4 border rounded shadow-sm bg-white">
  <h2 class="mb-4">Transaction Statement</h2>

  <!-- Loading & Error Messages -->
  <div *ngIf="loading" class="alert alert-info">
    Loading transactions...
  </div>

  <div *ngIf="errorMessage" class="alert alert-danger">
    {{ errorMessage }}
  </div>

  <!-- Filter Section -->
  <div class="filter-section mb-4 p-3 border rounded shadow-sm bg-light" *ngIf="transactions.length > 0">
    <h4 class="mb-3 text-primary">Filter Transactions</h4>
    <div class="row g-3 align-items-end">
      <div class="col-md-3">
        <label class="form-label fw-bold">Start Date:</label>
        <input type="date" class="form-control" [(ngModel)]="startDate" />
      </div>
      <div class="col-md-3">
        <label class="form-label fw-bold">End Date:</label>
        <input type="date" class="form-control" [(ngModel)]="endDate" />
      </div>
      <div class="col-md-2">
        <label class="form-label fw-bold">Type:</label>
        <select class="form-select" [(ngModel)]="type">
          <option value="">All</option>
          <option value="DEBIT">Debit</option>
          <option value="CREDIT">Credit</option>
        </select>
      </div>
      <div class="col-md-3">
        <label class="form-label fw-bold">Transaction Type:</label>
        <input type="text" class="form-control" [(ngModel)]="transactionType" placeholder="e.g. TRANSFER" />
      </div>
      <div class="col-md-1 d-flex align-items-end">
        <button class="btn btn-success w-100" (click)="applyFilter()">
          <i class="bi bi-funnel"></i> Apply
        </button>
      </div>
    </div>
  </div>

  <!-- PDF Export Button -->
  <div class="mb-3 text-end" *ngIf="transactions.length > 0">
    <button class="btn btn-danger" (click)="exportPDF()">
      <i class="bi bi-file-earmark-pdf"></i> Save as PDF
    </button>
  </div>

  <!-- Transaction Table -->
  <div #transactionTable *ngIf="transactions.length > 0" class="table-responsive">
    <table class="table table-striped table-bordered">
      <thead class="table-dark">
        <tr>
          <th>Trans Date</th>
          <th>Particulars</th>
          <th>Instrument No</th>

          <th>Receiver</th>
          <th>Type</th>
          <th>Transaction Type</th>
          <th>Withdraw Amount</th>
          <th>Deposit Amount</th>
          <th>Balance</th>


          <th>Company Name</th>
          <th>Billing ID</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let tx of transactions">
          <td>{{ tx.transactionTime | date:'short' }}</td>
          <td>{{ tx.description }}</td>
          <td>{{ tx.id }}</td>

          <td>{{ tx.receiverAccount?.name }}</td>
          <td [ngClass]="{'debit': tx.type === 'DEBIT', 'credit': tx.type === 'CREDIT'}">
            {{ tx.type }}
          </td>
          <td>{{ tx.transactionType }}</td>

          <!-- Withdraw Amount (only if DEBIT) -->
          <td>
            <span *ngIf="tx.type === 'DEBIT'">{{ tx.amount | number:'1.2-2' }}</span>
          </td>

          <!-- Deposit Amount (only if CREDIT) -->
          <td>
            <span *ngIf="tx.type === 'CREDIT'">{{ tx.amount | number:'1.2-2' }}</span>
          </td>

          <!-- Always show total Amount -->
        <td>{{ tx.runningBalance | number:'1.2-2' }}</td>

          <td>{{ tx.companyName }}</td>
          <td>{{ tx.accountHolderBillingId }}</td>
        </tr>

         <!-- Totals Row -->
        <tr class="table-secondary fw-bold">
          <td colspan="6" class="text-end">Totals</td>
          <td>{{ totalWithdraw | number:'1.2-2' }}</td>
          <td>{{ totalDeposit | number:'1.2-2' }}</td>
          <td>{{ totalBalance | number:'1.2-2' }}</td>
          <td colspan="2"></td>
        </tr>
      </tbody>
    </table>
  </div>

  <div *ngIf="transactions.length === 0 && !loading" class="alert alert-warning">
    No transactions found.
  </div>
</div>

=====================old==========end===

