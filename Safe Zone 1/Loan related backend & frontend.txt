==>Modify Date 16-09-2025
==>Loan er kaj complete ebar Admin Approvial diea loan complete korbo tai ekhane ager code rakhlam(For safty)


====LoanRestController start====

package com.emranhss.mkbankspring.restcontroller;

import com.emranhss.mkbankspring.dto.*;
import com.emranhss.mkbankspring.entity.Accounts;
import com.emranhss.mkbankspring.entity.Loan;
import com.emranhss.mkbankspring.service.AccountService;
import com.emranhss.mkbankspring.service.ILoanService;
import com.emranhss.mkbankspring.service.LoanService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/loans")
public class LoanRestController {
//    @Autowired
//    private ILoanService loanService;

    @Autowired
    private LoanService loanService1;

    @Autowired
    private AccountService accountService;

    @PostMapping("/calculate")
    public ResponseEntity<?> calculateEmi(@RequestBody LoanRequestDto dto) {
        try {
            EmiResponseDto res = loanService1.calculateEmi(dto.getLoanAmount(), dto.getDurationInMonths(), dto.getLoanType().name());
            return ResponseEntity.ok(res);
        } catch (Exception ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }



    @PostMapping("/apply")
    public ResponseEntity<?> applyLoan(
            @RequestBody LoanRequestDto dto,
            @RequestHeader("Authorization") String authHeader,
            Authentication authentication
    ) {


        try {

            // Token extract করা
            String token = authHeader.replace("Bearer ", "");

            Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
            Loan loan = loanService1.applyLoan(accountId, dto,token);

            LoanDto response = new LoanDto();
            response.setId(loan.getId());
            response.setLoanAmount(loan.getLoanAmount());
            response.setEmiAmount(loan.getEmiAmount());
            response.setStatus(loan.getStatus().name());
            response.setLoanType(loan.getLoanType().name());

            // AccountDto
            AccountsDTO accountDto = new AccountsDTO();
            accountDto.setId(loan.getAccount().getId());
            accountDto.setName(loan.getAccount().getName());
            accountDto.setBalance(loan.getAccount().getBalance());
            accountDto.setNid(loan.getAccount().getNid());
            accountDto.setPhoneNumber(loan.getAccount().getPhoneNumber());
            accountDto.setAddress(loan.getAccount().getAddress());
            accountDto.setAccountType(loan.getAccount().getAccountType());
            response.setAccount(accountDto);

            return ResponseEntity.ok(response);
        } catch (Exception ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }


// This endpoint only fetches pre-fill data for the Loan Apply form.
    @GetMapping("/apply/init")
    public ResponseEntity<LoanDto> getLoanInitData(Authentication authentication) {
        try {
            // 1️⃣ accountId ber kora
            Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
            Accounts account = accountService.findAccountById(accountId);

            // 2️⃣ LoanDto(pre-filled default values)
            LoanDto response = new LoanDto();

            response.setId(null); // এখনো loan create হয়নি, তাই null
            response.setLoanAmount(0); // user input
            response.setEmiAmount(0); // backend calculate করবে
            response.setInterestRate(0); // backend calculate করবে
            response.setStatus("PENDING"); // default
            response.setLoanType(""); // user input

            // 3️⃣ AccountDTO set
            AccountsDTO accountDto = new AccountsDTO();
            accountDto.setId(account.getId());
            accountDto.setName(account.getName());
            accountDto.setBalance(account.getBalance());
            accountDto.setNid(account.getNid());
            accountDto.setPhoneNumber(account.getPhoneNumber());
            accountDto.setAddress(account.getAddress());
            accountDto.setAccountType(account.getAccountType());

            response.setAccount(accountDto);

            return ResponseEntity.ok(response);
        } catch (Exception ex) {
            return ResponseEntity.badRequest().body(null);
        }
    }



    /**
     * Apply for loan.
     * Uses authenticated user's accountId (via accountService)
     * POST /api/loans/apply
     */
//    @PostMapping("/apply")
//    public ResponseEntity<?> applyLoan(@RequestBody LoanRequestDto dto, Authentication authentication) {
//        try {
//            // get accountId from authentication (implement accountService.findAccountByEmail)
//            Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
//            Loan loan = loanService.applyLoan(accountId, dto);
//            return ResponseEntity.ok(loan);
//        } catch (Exception ex) {
//            return ResponseEntity.badRequest().body(ex.getMessage());
//        }
//    }


 //Make payment towards a loan
    // Make payment
    @PostMapping("/pay")
    public ResponseEntity<?> payLoan(
            @RequestBody LoanPaymentDto paymentDto,
            @RequestHeader("Authorization") String authHeader,
            Authentication authentication
    ) {
        try {
            String token = authHeader.replace("Bearer ", "");
            Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
            Loan updated = loanService1.payLoan(accountId, paymentDto, token);
            return ResponseEntity.ok(updated);
        } catch (Exception ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }


//    @PostMapping("/pay")
//    public ResponseEntity<?> payLoan(
//            @RequestBody LoanPaymentDto paymentDto,
//            @RequestHeader("Authorization") String authHeader,
//            Authentication authentication) {
//        try {
//            String token = authHeader.replace("Bearer ", "");
//            Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
//            Loan updated = loanService1.payLoan(accountId, paymentDto,token);
//            return ResponseEntity.ok(updated);
//        } catch (Exception ex) {
//            return ResponseEntity.badRequest().body(ex.getMessage());
//        }
//    }


    //----------------------srart Get loan details-----------

    // Fetch a single loan
    @GetMapping("/{id}")
    public ResponseEntity<LoanDto> getLoanById(
            @PathVariable Long id,
            Authentication authentication
    ) {
        Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
        LoanDto loanDto = loanService1.getLoanDtoById(id, accountId);
        return ResponseEntity.ok(loanDto);
    }


//    @GetMapping("/{id}")
//    public ResponseEntity<LoanDto> getLoanById(
//            @PathVariable Long id,
//            Authentication authentication
//            ) {
//        // logged-in user এর accountId বের করা
//        Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
//
//        // service call with ownership check
//        LoanDto loanDto = loanService1.getLoanDtoById(id, accountId);
//
//        return ResponseEntity.ok(loanDto);
//    }

//
//    @GetMapping("/{loanId}")
//    public ResponseEntity<?> getLoan(@PathVariable Long loanId, Authentication authentication) {
//        try {
//            LoanDto loan = loanService1.getLoanById(loanId);
//            // optional: check ownership
//            return ResponseEntity.ok(loan);
//        } catch (Exception ex) {
//            return ResponseEntity.badRequest().body(ex.getMessage());
//        }
//    }
    //-------------end Get loan details-------------



    @GetMapping("/myloans")
    public ResponseEntity<List<LoanDto>> getMyLoans(Authentication authentication) {
        Long accountId = accountService.findAccountByEmail(authentication.getName()).getId();
        List<Loan> loans = loanService1.getLoansByAccount(accountId);

        List<LoanDto> loanDtos = loans.stream().map(loan -> {
            //data from loanDTO
            LoanDto dto = new LoanDto();
            dto.setId(loan.getId());
            dto.setLoanAmount(loan.getLoanAmount());
            dto.setInterestRate(loan.getInterestRate());
            dto.setEmiAmount(loan.getEmiAmount());
            dto.setRemainingAmount(loan.getRemainingAmount());
            dto.setTotalAlreadyPaidAmount(loan.getTotalAlreadyPaidAmount());
            dto.setStatus(loan.getStatus().name());
            dto.setLoanType(loan.getLoanType().name());
            dto.setLoanStartDate(loan.getLoanStartDate());
            dto.setLoanMaturityDate(loan.getLoanMaturityDate());



            //from accDTO
            AccountsDTO accDto = new AccountsDTO();
            accDto.setId(loan.getAccount().getId());
            accDto.setName(loan.getAccount().getName());
            accDto.setNid(loan.getAccount().getNid());
            accDto.setBalance(loan.getAccount().getBalance());
            accDto.setAccountType(loan.getAccount().getAccountType());
            accDto.setPhoneNumber(loan.getAccount().getPhoneNumber());
            accDto.setAddress(loan.getAccount().getAddress());
            dto.setAccount(accDto);

            return dto;
        }).toList();

        return ResponseEntity.ok(loanDtos);
    }






    // Account holder pay EMI
//    @PostMapping("pay/{loanId}")
//    public ResponseEntity<Loan> payEMI(@PathVariable Long loanId,
//                                       @RequestParam double amount) {
//        Loan loan = loanService1.payEMI(loanId, amount);
//        return ResponseEntity.ok(loan);
//    }

//
//    // Admin view all pending loans
//    @GetMapping("pending")
//    public ResponseEntity<List<Loan>> getPendingLoans() {
//        List<Loan> loans = loanService.getPendingLoans();
//        return ResponseEntity.ok(loans);
//    }
//
//    // Admin approve a loan
//    @PostMapping("approve/{loanId}")
//    public ResponseEntity<Loan> approveLoan(@PathVariable Long loanId) {
//        Loan loan = loanService.approveLoan(loanId);
//        return ResponseEntity.ok(loan);
//    }
//
//    // Admin reject a loan
//    @PostMapping("reject/{loanId}")
//    public ResponseEntity<Loan> rejectLoan(@PathVariable Long loanId) {
//        Loan loan = loanService.rejectLoan(loanId);
//        return ResponseEntity.ok(loan);
//    }
}

====LoanRestController End=====



======LoanService Start========

package com.emranhss.mkbankspring.service;

import com.emranhss.mkbankspring.dto.*;
import com.emranhss.mkbankspring.entity.*;
import com.emranhss.mkbankspring.repository.AccountRepository;
import com.emranhss.mkbankspring.repository.LoanRepository;
import com.emranhss.mkbankspring.repository.TransactionRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class LoanService{
    @Autowired
    private LoanRepository loanRepository;

    @Autowired
    private AccountService accountService;
    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private TransactionRepository transactionRepository;



    //loan interest rate calculate korar jonno
    private double getFixedInterestRate(LoanType loanType) {
        if (loanType == null) return 10.0; // default
        switch (loanType) {
            case PERSONAL: return 12.0;
            case HOME: return 8.0;
            case CAR: return 9.0;
            case EDUCATION: return 6.0;
            case BUSINESS: return 14.0;
            default: return 10.0;
        }
    }

    //loan calculate korar jonno
    public EmiResponseDto calculateEmi(double loanAmount, int durationInMonths, String loanTypeStr) {
        if (durationInMonths <= 0) throw new IllegalArgumentException("Duration must be > 0");
        if (durationInMonths > 60) throw new IllegalArgumentException("Duration cannot exceed 60 months");

        LoanType loanType = LoanType.valueOf(loanTypeStr);
        double interestRate = getFixedInterestRate(loanType);

        // Simple interest yearly on principal as user requested
        double totalInterest = loanAmount * (interestRate / 100.0);
        double totalPayable = loanAmount + totalInterest;
        double emi = totalPayable / durationInMonths;

        return new EmiResponseDto(emi, totalPayable, interestRate);
    }

    //Loan with approval   start---------------------------failed code
//    @Override
//    @Transactional
//    public Loan applyLoan(Long accountId, LoanRequestDto dto) {
//        // validation
//                if (dto.getDurationInMonths() <= 0 || dto.getDurationInMonths() > 60)
//            throw new IllegalArgumentException("Duration must be between 1 and 60 months");
//        if (dto.getLoanAmount() <= 0 || dto.getLoanAmount() > 99999999) {
//            throw new IllegalArgumentException("Loan amount must be > 0 and <= 99,999,999");
//        }
//
//        Accounts account = accountRepository.findById(accountId)
//                .orElseThrow(() -> new RuntimeException("Account not found"));
//
//                LoanType loanType = dto.getLoanType();
//        double interestRate = getFixedInterestRate(loanType);
//
//        double totalInterest = dto.getLoanAmount() * (interestRate / 100.0);
//        double totalPayable = dto.getLoanAmount() + totalInterest;
//        double emi = totalPayable / dto.getDurationInMonths();
//
//
//        // Create Loan
//        Loan loan = new Loan();
//        loan.setAccount(account);
//        loan.setLoanAmount(dto.getLoanAmount());
//        loan.setInterestRate(interestRate);
//        loan.setDurationInMonths(dto.getDurationInMonths());
//        loan.setEmiAmount(emi);
//        loan.setLoanType(loanType);
//        loan.setStatus(LoanStatus.PENDING);
//        Date start = new Date();
//        loan.setLoanStartDate(start);
//        loan.setLoanMaturityDate(addMonths(start, dto.getDurationInMonths()));
//        loan.setTotalAlreadyPaidAmount(0.0);
//        loan.setRemainingAmount(totalPayable);
//        loan.setUpdatedAt(new Date());
//
//        return loanRepository.save(loan);
//
//    }
//
//
//
//    public List<LoanDto> getPendingLoanDTOs() {
//        List<Loan> loans = loanRepository.findByStatus(LoanStatus.PENDING);
//
//        return loans.stream().map(loan -> {
//            LoanDto dto = new LoanDto();
//            dto.setId(loan.getId());
//            dto.setLoanAmount(loan.getLoanAmount());
//            dto.setEmiAmount(loan.getEmiAmount());
//            dto.setInterestRate(loan.getInterestRate());
//            dto.setStatus(loan.getStatus().name());
//            dto.setLoanType(loan.getLoanType().name());
//            dto.setLoanStartDate(loan.getLoanStartDate());
//            dto.setLoanMaturityDate(loan.getLoanMaturityDate());
//            dto.setTotalAlreadyPaidAmount(loan.getTotalAlreadyPaidAmount());
//            dto.setRemainingAmount(loan.getRemainingAmount());
//            dto.setPenaltyRate(loan.getPenaltyRate());
//            dto.setLastPaymentDate(loan.getLastPaymentDate());
//            dto.setUpdatedAt(loan.getUpdatedAt());
//
//            AccountsDTO accountDTO = new AccountsDTO();
//            accountDTO.setId(loan.getAccount().getId());
//            accountDTO.setName(loan.getAccount().getName());
//            accountDTO.setBalance(loan.getAccount().getBalance());
//            dto.setAccount(accountDTO);
//
//            return dto;
//        }).collect(Collectors.toList());
//    }
//
//
//
//
//
//    @Transactional
//    public Loan approveLoan(Long loanId) {
//        Loan loan = loanRepository.findById(loanId)
//                .orElseThrow(() -> new RuntimeException("Loan not found"));
//
//        if (loan.getStatus() != LoanStatus.PENDING) {
//            throw new IllegalStateException("Loan is not in pending state");
//        }
//
//        Accounts account = loan.getAccount();
//
//        // ✅ Loan Active
//        loan.setStatus(LoanStatus.ACTIVE);
//
//        // ✅ Account balance update
//        account.setBalance(account.getBalance() + loan.getLoanAmount());
//
//        // ✅ Transaction add
//        Transaction txn = new Transaction();
//        txn.setAccount(account);
//        txn.setAmount(loan.getLoanAmount());
//        txn.setType(TransactionType.DEPOSIT);
//        txn.setDescription("Loan Disbursed");
//        txn.setTransactionTime(new Date());
//
//        transactionRepository.save(txn);
//
//        return loanRepository.save(loan);
//    }
//
//
//
//    @Transactional
//    public Loan rejectLoan(Long loanId) {
//        Loan loan = loanRepository.findById(loanId)
//                .orElseThrow(() -> new RuntimeException("Loan not found"));
//
//        if (loan.getStatus() != LoanStatus.PENDING) {
//            throw new IllegalStateException("Loan is not in pending state");
//        }
//
//        loan.setStatus(LoanStatus.REJECTED);
//        return loanRepository.save(loan);
//    }
    //Loan with approval   end---------------------------failed code



//loan apply korar jonno
    public Loan applyLoan(Long accountId, LoanRequestDto dto,String token) {
        if (dto.getDurationInMonths() <= 0 || dto.getDurationInMonths() > 60)
            throw new IllegalArgumentException("Duration must be between 1 and 60 months");
        if (dto.getLoanAmount() <= 0 || dto.getLoanAmount() > 99999999)
            throw new IllegalArgumentException("Loan amount must be > 0 and <= 99,999,999");

        Accounts account = accountRepository.findById(accountId)
                .orElseThrow(() -> new RuntimeException("Account not found"));

        LoanType loanType = dto.getLoanType();
        double interestRate = getFixedInterestRate(loanType);

        double totalInterest = dto.getLoanAmount() * (interestRate / 100.0);
        double totalPayable = dto.getLoanAmount() + totalInterest;
        double emi = totalPayable / dto.getDurationInMonths();

        // Update account balance
        account.setBalance(account.getBalance() + dto.getLoanAmount());
        accountRepository.save(account);

        // Create Loan
        Loan loan = new Loan();
        loan.setAccount(account);
        loan.setLoanAmount(dto.getLoanAmount());
        loan.setInterestRate(interestRate);
        loan.setDurationInMonths(dto.getDurationInMonths());
        loan.setEmiAmount(emi);
        loan.setLoanType(loanType);
        loan.setStatus(LoanStatus.ACTIVE);
        Date start = new Date();
        loan.setLoanStartDate(start);
        loan.setLoanMaturityDate(addMonths(start, dto.getDurationInMonths()));
        loan.setTotalAlreadyPaidAmount(0.0);
        loan.setRemainingAmount(totalPayable);
        loan.setUpdatedAt(new Date());

        Loan savedLoan = loanRepository.save(loan);

        // Create Transaction for Loan Credit
        Transaction txn = new Transaction();
        txn.setAccount(account);
        txn.setType(TransactionType.DEPOSIT); // Account receives money
        txn.setTransactionTime(new Date());
        txn.setAmount(dto.getLoanAmount());
        txn.setDescription("Loan disbursed: Loan ID " + savedLoan.getId());
        txn.setReceiverAccount(null); // Receiver not needed for loan credit
        txn.setToken(token);
        transactionRepository.save(txn);

        return savedLoan;
    }







//
//    @Override
//    @Transactional
//    public Loan applyLoan(Long accountId, LoanRequestDto dto) {
//        if (dto.getDurationInMonths() <= 0) throw new IllegalArgumentException("Duration must be > 0");
//        if (dto.getDurationInMonths() > 60) throw new IllegalArgumentException("Duration cannot exceed 60 months");
//        if (dto.getLoanAmount() <= 0 || dto.getLoanAmount() > 99999999) {
//            throw new IllegalArgumentException("Loan amount must be > 0 and <= 99,999,999");
//        }
//
//
//        Accounts account = accountRepository.findById(accountId)
//                .orElseThrow(() -> new RuntimeException("Account not found"));
//
//        LoanType loanType = dto.getLoanType();
//        double interestRate = getFixedInterestRate(loanType);
//
//        double totalInterest = dto.getLoanAmount() * (interestRate / 100.0);
//        double totalPayable = dto.getLoanAmount() + totalInterest;
//        double emi = totalPayable / dto.getDurationInMonths();
//
//        Loan loan = new Loan();
//        loan.setAccount(account);
//        loan.setLoanAmount(dto.getLoanAmount());
//        loan.setInterestRate(interestRate);
//        loan.setDurationInMonths(dto.getDurationInMonths());
//        loan.setEmiAmount(emi);
//        loan.setLoanType(loanType);
//        loan.setStatus(LoanStatus.PENDING);
//        Date start = new Date();
//        loan.setLoanStartDate(start);
//        loan.setLoanMaturityDate(addMonths(start, dto.getDurationInMonths()));
//        loan.setTotalAlreadyPaidAmount(0.0);
//        loan.setRemainingAmount(totalPayable);
//        loan.setUpdatedAt(new Date());
//
//        return loanRepository.save(loan);
//    }




    //loan pay korar jonno
    public Loan payLoan(Long accountId, LoanPaymentDto paymentDto,String token) {
        if (paymentDto.getAmount() <= 0) throw new IllegalArgumentException("Payment amount must be > 0");

        Loan loan = loanRepository.findById(paymentDto.getLoanId())
                .orElseThrow(() -> new RuntimeException("Loan not found"));

        if (loan.getStatus() == LoanStatus.CLOSED) {
            throw new RuntimeException("This loan is already closed. No further payments allowed.");
        }

        Accounts account = accountRepository.findById(accountId)
                .orElseThrow(() -> new RuntimeException("Account not found"));

        if (!loan.getAccount().getId().equals(accountId)) {
            throw new RuntimeException("Loan does not belong to this account");
        }

        double payAmount = paymentDto.getAmount();

        if (payAmount > loan.getRemainingAmount()) {
            throw new RuntimeException("Payment amount must be less than loan remaining amount");
        }

        // Check sufficient balance
        if (account.getBalance() < payAmount) {
            throw new RuntimeException("Insufficient account balance");
        }

        // Deduct from account
        account.setBalance(account.getBalance() - payAmount);
        accountRepository.save(account); // persist

        // Update loan
        double newPaid = loan.getTotalAlreadyPaidAmount() + payAmount;
        double newRemaining = loan.getRemainingAmount() - payAmount;
        loan.setTotalAlreadyPaidAmount(newPaid);
        loan.setRemainingAmount(Math.max(0.0, newRemaining));
        loan.setLastPaymentDate(new Date());
        loan.setUpdatedAt(new Date());

        if (loan.getRemainingAmount() <= 0.0) {
            loan.setStatus(LoanStatus.CLOSED);
        } else {
            // if it was PENDING and first payment done, set ACTIVE
            if (loan.getStatus() == LoanStatus.PENDING) {
                loan.setStatus(LoanStatus.ACTIVE);
            }
        }

        // Create Transaction for Loan Credit
        Transaction txn = new Transaction();
        txn.setAccount(account);
        txn.setType(TransactionType.TRANSFER); // Account receives money
        txn.setTransactionTime(new Date());
        txn.setAmount(paymentDto.getAmount());
        txn.setDescription("Loan Installment payment "+ loan.getId());
        txn.setToken(token);
        txn.setReceiverAccount(null); // Receiver not needed for loan credit
        transactionRepository.save(txn);

        return loanRepository.save(loan);
    }

//-------------start---------------------

    // Fetch all loans for a given account
    public List<LoanDto> getLoansByAccountId(Long accountId) {
        List<Loan> loans = loanRepository.findByAccountId(accountId);

        return loans.stream().map(loan -> {
            Accounts account = loan.getAccount();
            AccountsDTO accountDTO = null;
            if (account != null) {
                accountDTO = new AccountsDTO(
                        account.getId(),
                        account.getName(),
                        account.getBalance(),
                        account.getAccountType(),
                        account.getNid(),
                        account.getPhoneNumber(),
                        account.getAddress(),
                        account.getPhoto()
                );
            }

            return new LoanDto(
                    loan.getId(),
                    loan.getLoanAmount(),
                    loan.getEmiAmount(),
                    loan.getInterestRate(),
                    loan.getStatus().toString(),
                    loan.getLoanType().toString(),
                    loan.getLoanStartDate(),
                    loan.getLoanMaturityDate(),
                    loan.getTotalAlreadyPaidAmount(),
                    loan.getRemainingAmount(),
                    loan.getPenaltyRate(),
                    loan.getLastPaymentDate(),
                    loan.getUpdatedAt(),
                    accountDTO
            );
        }).collect(Collectors.toList());
    }


    public LoanDto getLoanDtoById(Long loanId,Long accountId) {
        Loan loan = loanRepository.findById(loanId)
                .orElseThrow(() -> new RuntimeException("Loan not found"));

        // Ownership check
        if (!loan.getAccount().getId().equals(accountId)) {
            throw new RuntimeException("You are not authorized to view this loan");
        }

        // Account entity থেকে AccountsDTO বানানো
        Accounts account = loan.getAccount();
        AccountsDTO accountDTO = null;

        if (account != null) {
            accountDTO = new AccountsDTO(
                    account.getId(),
                    account.getName(),
                    account.getBalance(),
                    account.getAccountType(),
                    account.getNid(),
                    account.getPhoneNumber(),
                    account.getAddress(),
                    account.getPhoto()
            );
        }

        // LoanDto বানানো
        return new LoanDto(
                loan.getId(),
                loan.getLoanAmount(),
                loan.getEmiAmount(),
                loan.getInterestRate(),
                loan.getStatus().toString(),
                loan.getLoanType().toString(),
                loan.getLoanStartDate(),
                loan.getLoanMaturityDate(),
                loan.getTotalAlreadyPaidAmount(),
                loan.getRemainingAmount(),
                loan.getPenaltyRate(),
                loan.getLastPaymentDate(),
                loan.getUpdatedAt(),
                accountDTO
        );
    }


//    public LoanDto getLoanById(Long loanId) {
//        Loan loan = loanRepository.findById(loanId)
//                .orElseThrow(() -> new RuntimeException("Loan not found with ID: " + loanId));
//
//        // 👉 Convert Loan → LoanDto
//        return mapToDto(loan);
//    }
//
//    private LoanDto mapToDto(Loan loan) {
//        Accounts account = loan.getAccount();
//
//        // Account → AccountsDTO
//        AccountsDTO accountDto = new AccountsDTO(
//                account.getId(),
//                account.getName(),
//                account.getBalance(),
//                account.getAccountType(),
//                account.getNid(),
//                account.getPhoneNumber(),
//                account.getAddress(),
//                account.getPhoto()
//        );
//
//        // Loan → LoanDto
//        LoanDto dto = new LoanDto(
//                loan.getId(),
//                loan.getLoanAmount(),
//                loan.getEmiAmount(),
//                loan.getInterestRate(),
//                loan.getStatus().toString(),  // Enum to → String
//                loan.getLoanType().toString(),
//                loan.getLoanStartDate(),
//                loan.getLoanMaturityDate(),
//                loan.getTotalAlreadyPaidAmount(),
//                loan.getRemainingAmount(),
//                loan.getPenaltyRate(),
//                loan.getLastPaymentDate(),
//                loan.getUpdatedAt(),
//                accountDto
//        );
//
//        return dto;
//    }



    //----------------------------end----------------




    //login kore account holder eta diea tar sob loan view kortese
    public List<Loan> getLoansByAccount(Long accountId) {
        return loanRepository.findByAccountId(accountId);
    }


    // helper to add months
    private Date addMonths(Date date, int months) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.add(Calendar.MONTH, months);
        return cal.getTime();
    }



    // Account holder apply loan
//    public Loan applyLoan(Long accountId, Loan loan) {
//        Accounts account = accountService.findById(accountId)
//                .orElseThrow(() -> new RuntimeException("Account not found"));
//
//        loan.setAccount(account);
//        loan.setStatus(LoanStatus.PENDING);
//        loan.setLoanStartDate(new Date());
//
//        // EMI Calculation
//        double principal = loan.getLoanAmount();
//        double monthlyRate = loan.getInterestRate() / 12 / 100;
//        int months = loan.getDurationInMonths();
//        double emi = (principal * monthlyRate * Math.pow(1 + monthlyRate, months)) /
//                (Math.pow(1 + monthlyRate, months) - 1);
//        loan.setEmiAmount(Math.round(emi * 100.0) / 100.0);
//
//        // Total and remaining amount
//        loan.setTotalAlreadyPaidAmount(0);
//        loan.setRemainingAmount(loan.getEmiAmount() * months);
//
//        // Maturity Date
//        Calendar cal = Calendar.getInstance();
//        cal.setTime(new Date());
//        cal.add(Calendar.MONTH, months);
//        loan.setLoanMaturityDate(cal.getTime());
//
//        loan.setUpdatedAt(new Date());
//        return loanRepository.save(loan);
//    }
//
//    // Account holder view own loans


//
//    // Admin view pending loans
//    public List<Loan> getPendingLoans() {
//        return loanRepository.findByStatus(LoanStatus.PENDING);
//    }
//
//    // Admin approve loan
//    public Loan approveLoan(Long loanId) {
//        Loan loan = loanRepository.findById(loanId)
//                .orElseThrow(() -> new RuntimeException("Loan not found"));
//        loan.setStatus(LoanStatus.ACTIVE);
//        loan.setUpdatedAt(new Date());
//        return loanRepository.save(loan);
//    }
//
//    // Admin reject loan
//    public Loan rejectLoan(Long loanId) {
//        Loan loan = loanRepository.findById(loanId)
//                .orElseThrow(() -> new RuntimeException("Loan not found"));
//        loan.setStatus(LoanStatus.CLOSED);
//        loan.setUpdatedAt(new Date());
//        return loanRepository.save(loan);
//    }
//
//    // Payment (Account holder pays EMI)
//    public Loan payEMI(Long loanId, double amount) {
//        Loan loan = loanRepository.findById(loanId)
//                .orElseThrow(() -> new RuntimeException("Loan not found"));
//
//        // Update paid amount
//        double totalPaid = loan.getTotalAlreadyPaidAmount() + amount;
//        loan.setTotalAlreadyPaidAmount(totalPaid);
//
//        // Update remaining amount
//        double remaining = (loan.getEmiAmount() * loan.getDurationInMonths()) - totalPaid;
//        loan.setRemainingAmount(Math.max(0, remaining));
//
//        // Update last payment date
//        loan.setLastPaymentDate(new Date());
//        loan.setUpdatedAt(new Date());
//
//        // If fully paid, close loan
//        if (remaining <= 0) {
//            loan.setStatus(LoanStatus.CLOSED);
//        }
//
//        return loanRepository.save(loan);
//    }
}


======LoanService End==========



======AccountService Start========

package com.emranhss.mkbankspring.service;

import com.emranhss.mkbankspring.dto.AccountsDTO;
import com.emranhss.mkbankspring.entity.Accounts;
import com.emranhss.mkbankspring.repository.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    //find all account (connected with AccountResCon Method Number -3)
    public List<Accounts> getAll() {
        return accountRepository.findAll();
    }

    //    Method for Transaction Taka (id diea account er data ana)(connected with AccountResCon Method Number 3 & 4)
    public Optional<Accounts> findById(Long id) {
        return accountRepository.findById(id);
    }


    //find account by id (connected with AccountResCon Method Number -2)
    public Accounts findAccountById(Long id) {
        return accountRepository.findById(id).orElse(null);
    }

    //method for save (connected with AccountResCon Method Number -4)
    public Accounts save(Accounts accounts) {
        return accountRepository.save(accounts);
    }

    //method for delete
    public void delete(Long id) {
        accountRepository.deleteById(id);
    }

//    public Accounts getProfileByUserId(Long userId) {
//        return accountRepository.findByUserId(userId)
//                .orElseThrow(() -> new RuntimeException("Account not found"));
//    }


    // Profile method (returns DTO)
    public AccountsDTO getProfileByEmail(String email) {
        Accounts account = findAccountByEmail(email);

        AccountsDTO dto = new AccountsDTO();
        dto.setId(account.getId());
        dto.setName(account.getName());
        dto.setAccountActiveStatus(account.isAccountActiveStatus());
        dto.setAccountType(account.getAccountType());
        dto.setBalance(account.getBalance());
        dto.setNid(account.getNid());
        dto.setPhoneNumber(account.getPhoneNumber());
        dto.setAddress(account.getAddress());
        dto.setPhoto(account.getPhoto());
        dto.setDateOfBirth(account.getDateOfBirth());
        dto.setAccountOpeningDate(account.getAccountOpeningDate());
        dto.setAccountClosingDate(account.getAccountClosingDate());
        dto.setRole(account.getRole() != null ? account.getRole().name() : null);

        return dto;
    }

    //For all Accounts
    public List<AccountsDTO> getAllAccountsDTO() {
        return accountRepository.findAll().stream()
                .map(acc -> new AccountsDTO(
                        acc.getId() != null ? acc.getId() : 0,
                        acc.getName(),
                        acc.isAccountActiveStatus(),
                        acc.getAccountType(),
                        acc.getBalance(),
                        acc.getNid(),
                        acc.getPhoneNumber(),
                        acc.getAddress(),
                        acc.getPhoto(),
                        acc.getDateOfBirth(),
                        acc.getAccountOpeningDate(),
                        acc.getAccountClosingDate(),
                        acc.getRole() != null ? acc.getRole().toString() : ""
                ))
                .collect(Collectors.toList());
    }


    // Find Account by Email
    public Accounts findAccountByEmail(String email) {
        return accountRepository.findByUserEmail(email)
                .orElseThrow(() -> new RuntimeException("Account not found for user with email: " + email));
    }

    // Find Account Id by Email
    public Long findAccountIdByEmail(String email) {
        Accounts account = findAccountByEmail(email);
        return account.getId();
    }


    //---------Receiver data load start
    // Receiver Account load by ID
    public AccountsDTO getReceiverAccountById(Long receiverId) {
        Accounts account = accountRepository.findById(receiverId)
                .orElseThrow(() -> new RuntimeException("Receiver account not found!"));


        if (!account.isAccountActiveStatus()) {
            throw new RuntimeException("Receiver account is closed!");
        }

        // Entity → DTO mapping
        AccountsDTO dto = new AccountsDTO();
        dto.setId(account.getId());
        dto.setName(account.getName());
        dto.setAccountActiveStatus(account.isAccountActiveStatus());
        dto.setAccountType(account.getAccountType());
        dto.setBalance(account.getBalance());
        dto.setNid(account.getNid());
        dto.setPhoneNumber(account.getPhoneNumber());
        dto.setAddress(account.getAddress());
        dto.setPhoto(account.getPhoto());
        dto.setDateOfBirth(account.getDateOfBirth());
        dto.setAccountOpeningDate(account.getAccountOpeningDate());
        dto.setAccountClosingDate(account.getAccountClosingDate());
        dto.setRole(account.getRole() != null ? account.getRole().toString() : null);

        return dto;
    }
    //----------Receiver data load end

}


======AccountService End==========



======AdminLoanRestController Start========

package com.emranhss.mkbankspring.restcontroller;

import com.emranhss.mkbankspring.dto.AccountsDTO;
import com.emranhss.mkbankspring.dto.LoanDto;
import com.emranhss.mkbankspring.entity.Loan;
import com.emranhss.mkbankspring.entity.LoanStatus;
import com.emranhss.mkbankspring.entity.Transaction;
import com.emranhss.mkbankspring.entity.TransactionType;
import com.emranhss.mkbankspring.repository.AccountRepository;
import com.emranhss.mkbankspring.repository.LoanRepository;
import com.emranhss.mkbankspring.repository.TransactionRepository;
import com.emranhss.mkbankspring.service.LoanService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/admin/loans")
public class AdminLoanRestController {

    @Autowired
    private LoanRepository loanRepository;

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private TransactionRepository transactionRepository;
    @Autowired
    private LoanService loanService;

//    @GetMapping("/pending")
//    public ResponseEntity<List<LoanDto>> getPendingLoans() {
//        List<LoanDto> loanDTOs = loanService.getPendingLoanDTOs();
//        return ResponseEntity.ok(loanDTOs);
//    }


    // View all pending loans as DTO
    @GetMapping("/pendings")
    public ResponseEntity<List<LoanDto>> getPendingLoan() {
        List<Loan> loans = loanRepository.findByStatus(LoanStatus.PENDING);

        List<LoanDto> loanDTOs = loans.stream().map(loan -> {
            LoanDto dto = new LoanDto();
            dto.setId(loan.getId());
            dto.setLoanAmount(loan.getLoanAmount());
            dto.setEmiAmount(loan.getEmiAmount());
            dto.setInterestRate(loan.getInterestRate());
            dto.setStatus(loan.getStatus().name());
            dto.setLoanType(loan.getLoanType().name());
            dto.setLoanStartDate(loan.getLoanStartDate());
            dto.setLoanMaturityDate(loan.getLoanMaturityDate());
            dto.setTotalAlreadyPaidAmount(loan.getTotalAlreadyPaidAmount());
            dto.setRemainingAmount(loan.getRemainingAmount());
            dto.setPenaltyRate(loan.getPenaltyRate());
            dto.setLastPaymentDate(loan.getLastPaymentDate());
            dto.setUpdatedAt(loan.getUpdatedAt());

            // Account DTO mapping
            AccountsDTO accountDTO = new AccountsDTO();
            accountDTO.setId(loan.getAccount().getId());
            accountDTO.setName(loan.getAccount().getName());
            accountDTO.setBalance(loan.getAccount().getBalance());
            // প্রয়োজন অনুযায়ী অন্যান্য ফিল্ডও এখানে set করতে পারো

            dto.setAccount(accountDTO);

            return dto;
        }).collect(Collectors.toList());

        return ResponseEntity.ok(loanDTOs);
    }


    // Approve Loan
    @PostMapping("/{loanId}/approve")
    @Transactional
    public ResponseEntity<String> approveLoan(@PathVariable Long loanId) {
        Loan loan = loanRepository.findById(loanId)
                .orElseThrow(() -> new RuntimeException("Loan not found"));

        if (loan.getStatus() != LoanStatus.PENDING) {
            return ResponseEntity.badRequest().body("Loan is not in pending state");
        }

        // Loan approve
        loan.setStatus(LoanStatus.ACTIVE);
        loanRepository.save(loan);

        // Update account balance
        var account = loan.getAccount();
        account.setBalance(account.getBalance() + loan.getLoanAmount());
        accountRepository.save(account);

        // Transaction entry
        Transaction txn = new Transaction();
        txn.setAccount(account);
        txn.setAmount(loan.getLoanAmount());
        txn.setType(TransactionType.DEPOSIT);
        txn.setDescription("Loan Approved and Credited to Account");
        txn.setTransactionTime(new Date());
        transactionRepository.save(txn);

        return ResponseEntity.ok("Loan approved successfully!");
    }

    // Reject Loan
    @PostMapping("/{loanId}/reject")
    @Transactional
    public ResponseEntity<String> rejectLoan(@PathVariable Long loanId) {
        Loan loan = loanRepository.findById(loanId)
                .orElseThrow(() -> new RuntimeException("Loan not found"));

        if (loan.getStatus() != LoanStatus.PENDING) {
            return ResponseEntity.badRequest().body("Loan is not in pending state");
        }

        loan.setStatus(LoanStatus.REJECTED);
        loanRepository.save(loan);

        return ResponseEntity.ok("Loan rejected successfully!");
    }
}


======AdminLoanRestController End==========




======Start========
======End==========


==================================```
======Frontend Code Start============
=================================````



======ApplyLoanComponent.ts Start========

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ChangeDetectorRef, Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';
import { AlertService } from '../../service/alert-service';
import { Router } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';


@Component({
  selector: 'app-apply-loan-component',
  standalone: false,
  templateUrl: './apply-loan-component.html',
  styleUrl: './apply-loan-component.css'
})
export class ApplyLoanComponent  implements OnInit{

// User input
  loanAmount!: number;
  durationInMonths!: number;
  loanType: string = '';

  // Pre-filled data
  accountId!: number;
  accountName: string = '';
  balance!: number;
  accountType: string = '';
  nid: string = '';
  phoneNumber: string = '';
  address: string = '';

  // Calculated fields
  emi: number = 0;
  totalPayable: number = 0;
  interestRate: number = 0;

  message: string = '';

  constructor(
    private http: HttpClient,
    private alertService: AlertService,
    private cdr: ChangeDetectorRef,
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object
  ) { }

  ngOnInit(): void {
    this.loadInitData();
  }

  private getAuthToken(): string {
    if (isPlatformBrowser(this.platformId)) {
      return localStorage.getItem('authToken') || '';
    }
    return '';
  }

  // EMI calculation via backend
  calculateEmi(): void {
    if (!this.loanAmount || !this.durationInMonths || !this.loanType) {
      this.emi = 0;
      this.totalPayable = 0;
      this.interestRate = 0;
      return;
    }

    const token = this.getAuthToken();
    if (!token) return;

    const payload = {
      loanAmount: this.loanAmount,
      durationInMonths: this.durationInMonths,
      loanType: this.loanType
    };

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    this.http.post<any>('http://localhost:8085/api/loans/calculate', payload, { headers })
      .subscribe({
        next: (res) => {
           console.log('EMI Response:', res);
          this.emi = res.emi;
           console.log('EMI Response:', res);
          this.totalPayable = res.totalPayable;
          this.interestRate = res.interestRate;
          this.cdr.markForCheck();
        },
        error: (err) => {
          console.error('EMI calculation failed', err);
        }
      });
  }

  loadInitData() {
    const token = this.getAuthToken();
    if (!token) {
      this.alertService.error('Authentication token not found. Please login again.');
      return;
    }

    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });

    this.http.get<any>('http://localhost:8085/api/loans/apply/init', { headers })
      .subscribe({
        next: (res) => {
          // Pre-fill account & loan info
          this.accountId = res.account.id;
          this.accountName = res.account.name;
          this.balance = res.account.balance;
          this.accountType = res.account.accountType;
          this.nid = res.account.nid;
          this.phoneNumber = res.account.phoneNumber;
          this.address = res.account.address;

          // Optional: default values
          this.loanAmount = 0;
          this.durationInMonths = 0;
          this.loanType = '';
        },
        error: (err) => {
          console.error(err);
          this.alertService.error('Failed to load initial loan data');
        }
      });
  }

  applyLoan() {
    if (!this.loanAmount || !this.durationInMonths || !this.loanType) {
      this.alertService.error('All fields are required!');
      return;
    }

    const payload = {
      loanAmount: this.loanAmount,
      durationInMonths: this.durationInMonths,
      loanType: this.loanType
    };

    const token = this.getAuthToken();
    if (!token) {
      this.alertService.error('Authentication token not found. Please login again.');
      return;
    }

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    this.http.post('http://localhost:8085/api/loans/apply', payload, { headers })
      .subscribe({
        next: (res: any) => {
          this.message = `Loan Applied Successfully! Loan ID: ${res.id}`;
          this.alertService.success(this.message);
          this.cdr.markForCheck();
          this.router.navigate(['/view-all-loan']);
        },
        error: (err: any) => {
          console.error(err);
          this.message = err.error || 'Error applying for loan';
          this.alertService.error(this.message);
        }
      });
  }

}

======ApplyLoanComponent.ts End==========



======ApplyLoanComponent.html Start========

<div class="container my-5" style="max-width: 720px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
  <div class="card shadow-sm">
    <div class="card-body">
      <h2 class="text-center text-primary mb-4">Apply for a Loan</h2>

      <form>
        <!-- Account Info -->
        <h5 class="mb-3 border-bottom pb-2 text-secondary">Account Information</h5>

        <div class="row g-3 mb-3">
          <div class="col-md-6">
            <label class="form-label">Account Name</label>
            <input type="text" [value]="accountName" class="form-control" readonly>
          </div>
          <div class="col-md-6">
            <label class="form-label">Account ID</label>
            <input type="text" [value]="accountId" class="form-control" readonly>
          </div>
          <div class="col-md-6">
            <label class="form-label">Balance</label>
            <input type="text" [value]="balance | number:'1.2-2'" class="form-control" readonly>
          </div>
          <div class="col-md-6">
            <label class="form-label">Account Type</label>
            <input type="text" [value]="accountType" class="form-control" readonly>
          </div>
          <div class="col-md-6">
            <label class="form-label">NID</label>
            <input type="text" [value]="nid" class="form-control" readonly>
          </div>
          <div class="col-md-6">
            <label class="form-label">Phone Number</label>
            <input type="text" [value]="phoneNumber" class="form-control" readonly>
          </div>
          <div class="col-12">
            <label class="form-label">Address</label>
            <input type="text" [value]="address" class="form-control" readonly>
          </div>
        </div>

        <!-- Loan Details -->
        <h5 class="mb-3 mt-4 border-bottom pb-2 text-secondary">Loan Details</h5>

        <div class="row g-3 mb-3">
          <div class="col-md-4">
            <label for="loanAmount" class="form-label">Loan Amount</label>
            <input type="number" id="loanAmount" [(ngModel)]="loanAmount" name="loanAmount" (input)="calculateEmi()" class="form-control" placeholder="e.g. 100000">
          </div>
          <div class="col-md-4">
            <label for="durationInMonths" class="form-label">Duration (Months)</label>
            <input type="number" id="durationInMonths" [(ngModel)]="durationInMonths" name="durationInMonths" (input)="calculateEmi()" class="form-control" placeholder="e.g. 12">
          </div>
          <div class="col-md-4">
            <label for="loanType" class="form-label">Loan Type</label>
            <select id="loanType" [(ngModel)]="loanType" name="loanType" (change)="calculateEmi()" class="form-select">
              <option value="" disabled selected>Select type</option>
              <option value="PERSONAL">Personal</option>
              <option value="HOME">Home</option>
              <option value="CAR">Car</option>
              <option value="EDUCATION">Education</option>
              <option value="BUSINESS">Business</option>
            </select>
          </div>
        </div>

        <!-- EMI Summary -->
        <div *ngIf="emi > 0 || totalPayable > 0" class="bg-light rounded p-3 mb-3 border">
          <h6 class="text-muted mb-3">Loan Summary</h6>
          <div class="row">
            <div class="col-md-4">
              <small class="text-uppercase text-secondary">Interest Rate</small>
              <div class="fw-semibold">{{ interestRate }}%</div>
            </div>
            <div class="col-md-4">
              <small class="text-uppercase text-secondary">Total Payable</small>
              <div class="fw-semibold">{{ totalPayable | number:'1.2-2' }}</div>
            </div>
            <div class="col-md-4">
              <small class="text-uppercase text-secondary">Monthly EMI</small>
              <div class="fw-semibold">{{ emi | number:'1.2-2' }}</div>
            </div>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="d-grid">
          <button type="button" class="btn btn-primary" (click)="applyLoan()">Apply Now</button>
        </div>

        <!-- Response Message -->
        <div *ngIf="message" class="alert alert-info mt-3 mb-0">
          {{ message }}
        </div>
      </form>
    </div>
  </div>
</div>


======ApplyLoanComponent.html End==========



======Start========
======End==========



======Start========
======End==========



======Start========
======End==========



======Start========
======End==========

