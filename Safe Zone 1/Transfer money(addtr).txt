import { ChangeDetectorRef, Component, Inject, PLATFORM_ID } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Transactionsservice } from '../../service/transactionsservice';
import { Transaction } from '../../model/transactions.model';
import { TransactionType } from '../../model/transactionType.model';
import { isPlatformBrowser } from '@angular/common';
import { AlertService } from '../../service/alert-service';

@Component({
  selector: 'app-addtransaction',
  standalone: false,
  templateUrl: './addtransaction.html',
  styleUrl: './addtransaction.css'
})
export class Addtransaction {

  transactionForm!: FormGroup;
  transactionType = TransactionType;
  token: string = '';

  constructor(
    private fb: FormBuilder,
    private transactionService: Transactionsservice,
    private alertService:AlertService,
    private cdRef: ChangeDetectorRef,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {}

  ngOnInit(): void {
    // Browser-only token fetch
    if (isPlatformBrowser(this.platformId)) {
      this.token = localStorage.getItem('authToken') || '';
    }

    // Reactive form setup
    this.transactionForm = this.fb.group({
      type: ['', Validators.required],
      amount: [0, [Validators.required, Validators.min(1)]],
      description: [''],
      receiverId: ['']
    });

    // Load saved form data from localStorage
    if (isPlatformBrowser(this.platformId)) {
      const savedForm = localStorage.getItem('transactionForm');
      if (savedForm) {
        this.transactionForm.patchValue(JSON.parse(savedForm));
      }

      // Auto-save form on changes
      this.transactionForm.valueChanges.subscribe(val => {
        localStorage.setItem('transactionForm', JSON.stringify(val));
      });
    }
  }

  // Submit handler
  onSubmit() {
    if (this.transactionForm.invalid) {
      // alert('Form is invalid! Please fill all required fields.');
      this.alertService.warning('Form is invalid! Please fill all required fields.');
      return;
    }

    const formValue = this.transactionForm.value;

    // Build transaction object
    const transaction: Transaction = {
      type: formValue.type,
      amount: formValue.amount,
      description: formValue.description,
      transactionTime: new Date(),
      accountId: 0 // backend will handle accountId from token
    };

    if (formValue.type === this.transactionType.TRANSFER) {
      if (!formValue.receiverId) {
        // alert('Receiver Account ID is required for Transfer!');
        this.alertService.warning('Receiver Account ID is required for Transfer!');
        return;
      }
      transaction.receiverAccountId = formValue.receiverId;

      // Transfer call
      this.transactionService.transfer(transaction, formValue.receiverId).subscribe({
        next: res => {
          // alert('Transfer Successful!');
          this.alertService.success('Transfer Successful!');
          this.resetForm();
        },
        error: err => {
          console.error('Transfer failed:', err);
          // alert(err.error?.message || 'Transfer Failed!');
          this.alertService.error(err.error?.message || 'Transfer Failed!');
        }
      });

    }
  }

  // Reset form + clear localStorage
  resetForm() {
    this.transactionForm.reset({
      type: '',
      amount: 0,
      description: '',
      receiverId: ''
    });
    if (isPlatformBrowser(this.platformId)) {
      localStorage.removeItem('transactionForm');
    }
  }

}
----------------------------
<div class="container mt-5" style="max-width: 600px;">
  <div class="card shadow-lg border-0 rounded-4">
    <div class="card-header bg-primary text-white text-center rounded-top-4">
      <h2 class="mb-0">ðŸ’¸ Bank Transfer</h2>
    </div>

    <div class="card-body p-4">
      <form [formGroup]="transactionForm" (ngSubmit)="onSubmit()" class="transaction-form">

        <!-- Transaction Type -->
        <div class="form-group mb-3">
          <label class="fw-semibold">Transaction Type</label>
          <select formControlName="type" class="form-select shadow-sm">
            <option [ngValue]="transactionType.TRANSFER">Transfer</option>
          </select>
          <div *ngIf="transactionForm.get('type')?.invalid && transactionForm.get('type')?.touched" 
               class="text-danger small mt-1">
            Transaction type is required.
          </div>
        </div>

        <!-- Receiver Account -->
        <div class="form-group mb-3">
          <label class="fw-semibold">Receiver Account ID</label>
          <input type="number" formControlName="receiverId" class="form-control shadow-sm" 
                 placeholder="Enter Receiver Account ID">
          <div *ngIf="transactionForm.get('receiverId')?.invalid && transactionForm.get('receiverId')?.touched" 
               class="text-danger small mt-1">
            Receiver Account ID is required for transfer.
          </div>
        </div>

        <!-- Amount -->
        <div class="form-group mb-3">
          <label class="fw-semibold">Amount</label>
          <input type="number" formControlName="amount" class="form-control shadow-sm" placeholder="Enter Amount">
          <div *ngIf="transactionForm.get('amount')?.invalid && transactionForm.get('amount')?.touched" 
               class="text-danger small mt-1">
            Amount must be greater than 0.
          </div>
        </div>

        <!-- Description -->
        <div class="form-group mb-4">
          <label class="fw-semibold">Description</label>
          <textarea formControlName="description" class="form-control shadow-sm" rows="3" 
                    placeholder="Optional"></textarea>
        </div>

        <!-- Buttons -->
        <div class="d-flex justify-content-between">
          <button type="submit" class="btn btn-success px-4 shadow-sm" 
                  [disabled]="transactionForm.invalid">Submit</button>
          <button type="button" class="btn btn-outline-secondary px-4 shadow-sm" (click)="resetForm()">Reset</button>
        </div>
      </form>
    </div>
  </div>
</div>
