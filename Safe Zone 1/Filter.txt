import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { User } from '../../model/user.model';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';
import { Accountsservice } from '../../service/accountsservice';
import { Accounts } from '../../model/accounts.model';

@Component({
  selector: 'app-viewallusercomponent',
  standalone: false,
  templateUrl: './viewallusercomponent.html',
  styleUrl: './viewallusercomponent.css'
})
export class Viewallusercomponent implements OnInit {
  users: User[] = [];
  filteredUser: User[] = [];
  searchUserId: number | null = null;

  constructor(
    private userservice: UserService,
    private router: Router,
    private cdr: ChangeDetectorRef
  ) { }


  ngOnInit(): void {
    this.loadData();
  }


  loadData(): void {
    this.userservice.getAllUsers().subscribe({
      next: (data) => {
        this.users = data;
        this.filteredUser = [...data]; //  Add this line
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Error loading users:', err);
      }
    });
  }



  // filterUser(): void {
  //   if (this.searchUserId === null) {
  //     this.filteredUser = [...this.users]; // reset
  //   } else {
  //     this.filteredUser = this.users.filter(acc =>
  //       acc.id === this.searchUserId
  //     );
  //   }
  //   this.cdr.markForCheck();
  // }



  deleteUser(id: number): void {

    // this.accountService.deleteAccount(id); //last update "sir evabe dile sudhu id delete hoy bakita delete hoy na"


    this.userservice.deleteUser(id).subscribe({
      next: () => {

        console.log('User deleted');
        this.loadData();
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.log('Error deleting User: ', err);
      }

    })

  }

  getUserById(id: number): void {
    // this.accountService.getAccountsByUserId(id);
    this.userservice.getUserById(id).subscribe({

      next: (res) => {
        console.log(res)
        console.log("Data get Successfull");
        this.router.navigate(['/updateuser', id])
      },

      error: (err) => {
        console.log(err);

      }


    });
  }


}


-------------------
<p class="text-primary fw-semibold mb-3">viewallusercomponent works!</p>

<div class="container my-4 p-4 bg-light border border-success rounded shadow-sm">

  <h1 class="text-white text-center py-3 rounded"
    style="background: linear-gradient(to right, #0072ff, #00c6ff); font-weight: bold;">
    <i class="fa fa-users me-2"></i>All User Details
  </h1>

  <!-- 🔍 Search Input -->

  <div class="mb-3">
    <strong>Search User</strong>
    <input type="text" [(ngModel)]="searchUserId"  placeholder="Search by User ID"
      class="form-control" />

  </div>

  <table class="table table-striped table-hover table-bordered text-center align-middle shadow-sm mt-3">

    <thead class="table-dark">
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Email</th>
        <th>Phone Number</th>
        <th>Photo</th>
        <th>Action</th>
      </tr>
    </thead>

    <tbody>
      <tr *ngFor="let u of filteredUser">
        <td>{{ u.id }}</td>
        <td class="text-info fw-semibold">{{ u.name }}</td>
        <td><i class="fa fa-envelope me-1 text-muted"></i>{{ u.email }}</td>
        <td><i class="fa fa-envelope me-1 text-muted"></i>{{ u.phoneNumber }}</td>
        <td>
          <img [src]="'http://localhost:8085/images/user/'+u.photo" alt="User photo"
            style="width: 50px; height: 50px; object-fit: cover; border-radius: 50%;">
        </td>
        <td>
          <button class="btn btn-outline-success btn-sm me-2 mr-4" (click)="getUserById(u.id!)">
            <i class="fa fa-edit"></i> Edit
          </button>
          <button class="btn btn-outline-danger btn-sm" (click)="deleteUser(u.id!)">
            <i class="fa fa-trash"></i> Delete
          </button>
        </td>
      </tr>
    </tbody>


  </table>

</div>

=======================Perfect Filter by id For viewAlluser=========Start=======
import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { User } from '../../model/user.model';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';
import { Accountsservice } from '../../service/accountsservice';
import { Accounts } from '../../model/accounts.model';

@Component({
  selector: 'app-viewallusercomponent',
  standalone: false,
  templateUrl: './viewallusercomponent.html',
  styleUrl: './viewallusercomponent.css'
})
export class Viewallusercomponent implements OnInit {
  users: User[] = [];
  filteredUser: User[] = [];
  searchUserId: number | null = null;

  constructor(
    private userservice: UserService,
    private router: Router,
    private cdr: ChangeDetectorRef
  ) { }

  ngOnInit(): void {
    this.loadData();
  }

  loadData(): void {
    this.userservice.getAllUsers().subscribe({
      next: (data) => {
        this.users = data;
        this.filteredUser = [...data]; // initially show all users
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Error loading users:', err);
      }
    });
  }

  // 🔍 Search by User ID
  filterUser(): void {
    if (!this.searchUserId) {
      this.filteredUser = [...this.users]; // reset to all users
    } else {
      this.filteredUser = this.users.filter(u =>
        u.id === this.searchUserId
      );
    }
    this.cdr.markForCheck();
  }

  deleteUser(id: number): void {
    this.userservice.deleteUser(id).subscribe({
      next: () => {
        console.log('User deleted');
        this.loadData();
        this.cdr.markForCheck();
      },
      error: (err) => console.log('Error deleting User: ', err)
    });
  }

  getUserById(id: number): void {
    this.userservice.getUserById(id).subscribe({
      next: (res) => {
        console.log("User details fetched:", res);
        this.router.navigate(['/updateuser', id]);
      },
      error: (err) => console.log(err)
    });
  }


}
===================================html==============
<p class="text-primary fw-semibold mb-3">View All Users</p>

<div class="container my-4 p-4 bg-light border border-success rounded shadow-sm">

  <h1 class="text-white text-center py-3 rounded"
      style="background: linear-gradient(to right, #0072ff, #00c6ff); font-weight: bold;">
    <i class="fa fa-users me-2"></i>All User Details
  </h1>

  <!-- 🔍 Search by User ID -->
  <div class="mb-3">
    <strong>Search User by ID</strong>
    <input 
      type="number" 
      [(ngModel)]="searchUserId"
      placeholder="Enter User ID"
      class="form-control"
      (input)="filterUser()"
      (keydown.enter)="filterUser()"
    />
  </div>

  <table class="table table-striped table-hover table-bordered text-center align-middle shadow-sm mt-3">
    <thead class="table-dark">
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Email</th>
        <th>Phone Number</th>
        <th>Photo</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let u of filteredUser">
        <td>{{ u.id }}</td>
        <td class="text-info fw-semibold">{{ u.name }}</td>
        <td><i class="fa fa-envelope me-1 text-muted"></i>{{ u.email }}</td>
        <td><i class="fa fa-phone me-1 text-muted"></i>{{ u.phoneNumber }}</td>
        <td>
          <img [src]="'http://localhost:8085/images/user/'+u.photo" alt="User photo"
               style="width: 50px; height: 50px; object-fit: cover; border-radius: 50%;">
        </td>
        <td>
          <button class="btn btn-outline-success btn-sm me-2" (click)="getUserById(u.id!)">
            <i class="fa fa-edit"></i> Edit
          </button>
          <button class="btn btn-outline-danger btn-sm" (click)="deleteUser(u.id!)">
            <i class="fa fa-trash"></i> Delete
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


=======================Perfect Filter by id=========End=======


=======================Perfect Filter by id,nid,phone For viewAllAccounts=========Start=======
<div class="p-4">
  <h2 class="text-2xl font-bold mb-4">All Accounts</h2>

<!-- 🔍 Search Inputs -->
 <!-- 🔍 Search Inputs -->
  <div class="row mb-3 g-2">
    <div class="col-md-4">
      <input
        type="text"
        [(ngModel)]="searchById"
        placeholder="Search by ID"
        class="form-control"
        (input)="filterAccounts()"
        (keydown.enter)="filterAccounts()"
      />
    </div>

    <div class="col-md-4">
      <input
        type="text"
        [(ngModel)]="searchByNid"
        placeholder="Search by NID"
        class="form-control"
        (input)="filterAccounts()"
        (keydown.enter)="filterAccounts()"
      />
    </div>

    <div class="col-md-4">
      <input
        type="text"
        [(ngModel)]="searchByPhone"
        placeholder="Search by Phone"
        class="form-control"
        (input)="filterAccounts()"
        (keydown.enter)="filterAccounts()"
      />
    </div>
  </div>

  <!-- Scroll wrapper -->
  <div class="overflow-x-auto border rounded-lg shadow-md">
    <table class="min-w-[1200px] bg-white border-collapse">
      <thead class="bg-gray-100">
        <tr>
          <th class="px-4 py-2 border-b">ID</th>
          <th class="px-4 py-2 border-b">Photo</th>
          <th class="px-4 py-2 border-b">Name</th>
          <th class="px-4 py-2 border-b">Balance</th>
          <th class="px-4 py-2 border-b">Account Type</th>
          <th class="px-4 py-2 border-b">NID</th>
          <th class="px-4 py-2 border-b">Phone</th>
          <th class="px-4 py-2 border-b">Address</th>
          <th class="px-4 py-2 border-b">Date of Birth</th>
          <th class="px-4 py-2 border-b">Opening Date</th>
          <th class="px-4 py-2 border-b">Closing Date</th>
          <th class="px-4 py-2 border-b">Role</th>
          <th class="px-4 py-2 border-b">Status</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let acc of filteredAccount" class="hover:bg-gray-50">
          <td class="px-4 py-2 border-b">{{ acc.id }}</td>
          <td> <img [src]="'http://localhost:8085/images/account/'+acc.photo"
              class="rounded-circle border border-3 border-primary me-3" width="100" height="120"></td>
          <td class="px-4 py-2 border-b">{{ acc.name }}</td>
          <td class="px-4 py-2 border-b">{{ acc.balance | currency:'BDT' }}</td>
          <td class="px-4 py-2 border-b">{{ acc.accountType }}</td>
          <td class="px-4 py-2 border-b">{{ acc.nid }}</td>
          <td class="px-4 py-2 border-b">{{ acc.phoneNumber }}</td>
          <td class="px-4 py-2 border-b">{{ acc.address }}</td>
          <td class="px-4 py-2 border-b">{{ acc.dateOfBirth | date:'dd-MM-yyyy' }}</td>
          <td class="px-4 py-2 border-b">{{ acc.accountOpeningDate | date:'dd-MM-yyyy' }}</td>
          <td class="px-4 py-2 border-b">{{ acc.accountClosingDate ? (acc.accountClosingDate | date:'dd-MM-yyyy') : '-'
            }}</td>
          <td class="px-4 py-2 border-b">{{ acc.role }}</td>
          <td class="px-4 py-2 border-b">
            <span [ngClass]="acc.accountActiveStatus ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'">
              {{ acc.accountActiveStatus ? 'Active' : 'Closed' }}
            </span>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
-----------------------------------------
import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { Accountsservice } from '../../service/accountsservice';
import { Router } from '@angular/router';
import { UserService } from '../../service/user.service';
import { Accounts } from '../../model/accounts.model';
import { User } from '../../model/user.model';

@Component({
  selector: 'app-view-all-accounts',
  standalone: false,
  templateUrl: './view-all-accounts.html',
  styleUrl: './view-all-accounts.css'
})
export class ViewAllAccounts implements OnInit {

  account: Accounts[] = [];
  filteredAccount: Accounts[] = [];
  // searchAccountId: number | null = null;

  //For Search----Start
  searchById: string = '';
  searchByNid: string = '';
  searchByPhone: string = '';
  // searchByAccountType: string = '';
  //For Search----End

  constructor(
    private accountService: Accountsservice,
    private userService: UserService,
    private router: Router,
    private cdr: ChangeDetectorRef
  ) { }

  ngOnInit(): void {
    this.loadData();
  }

  loadData(): void {
    this.accountService.getAllAccounts().subscribe(accounts => {
      this.account = accounts;
      console.log("Accounts from API: ", this.account);
      this.filteredAccount = [...accounts];
      this.cdr.markForCheck();
    });
  }

filterAccounts(): void {
  this.filteredAccount = this.account.filter(acc => {
    const matchesId = this.searchById ? acc.id?.toString().includes(this.searchById.trim()) : true;
    const matchesNid = this.searchByNid ? acc.nid?.toLowerCase().includes(this.searchByNid.trim().toLowerCase()) : true;
    const matchesPhone = this.searchByPhone ? acc.phoneNumber?.toLowerCase().includes(this.searchByPhone.trim().toLowerCase()) : true;

    return matchesId && matchesNid && matchesPhone;
  });

  this.cdr.markForCheck();
}


  
  // filterById(): void {
  //   if (!this.searchById) {
  //     this.filteredAccount = [...this.account];
  //   } else {
  //     const search = this.searchById.toLowerCase();
  //     this.filteredAccount = this.account.filter(a =>
  //       a.id?.toString() === search
  //     );
  //   }
  //   this.cdr.markForCheck();
  // }

  // filterByNid(): void {
  //   if (!this.searchByNid) {
  //     this.filteredAccount = [...this.account];
  //   } else {
  //     const search = this.searchByNid.toLowerCase();
  //     this.filteredAccount = this.account.filter(a =>
  //       a.nid?.toLowerCase().includes(search)
  //     );
  //   }
  //   this.cdr.markForCheck();
  // }

  // filterByPhone(): void {
  //   if (!this.searchByPhone) {
  //     this.filteredAccount = [...this.account];
  //   } else {
  //     const search = this.searchByPhone.toLowerCase();
  //     this.filteredAccount = this.account.filter(a =>
  //       a.phoneNumber?.toLowerCase().includes(search)
  //     );
  //   }
  //   this.cdr.markForCheck();
  // }

  // filterAccounts(): void {
  //   if (this.searchAccountId === null) {
  //     this.filteredAccount = [...this.account]; // reset
  //   } else {
  //     this.filteredAccount = this.account.filter(acc =>
  //       acc.id === this.searchAccountId
  //     );
  //   }
  //   this.cdr.markForCheck();
  // }




  deleteAccount(id: number): void {
    const confirmed = window.confirm('Are you sure you want to delete this account? This action cannot be undone.');

    if (!confirmed) {
      return; // user cancelled
    }

    this.accountService.deleteAccount(id).subscribe({
      next: () => {
        console.log('Account deleted');
        this.loadData();
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.log('Error deleting User: ', err);
      }
    });
  }


  closeAccount(id: number): void {
    const conform = window.confirm('Are you sure you want to close this account?');
    if (!conform) {
      return;
    }


    this.accountService.closeAccount(id).subscribe({
      next: () => {
        this.loadData();
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.log('Error closing account:', err);
      }
    });
  }

  openAccount(id: number): void {
    this.accountService.openAccount(id).subscribe({
      next: () => {
        this.loadData();
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.log('Error opening account:', err);
      }
    });
  }

}

=======================Perfect Filter by id,nid,phone For Accounts=========End=======
